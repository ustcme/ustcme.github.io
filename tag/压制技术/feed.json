{
    "version": "https://jsonfeed.org/version/1",
    "title": "Sakura • All posts by \"压制技术\" tag",
    "description": "一个专注于技术和思考分享的博客",
    "home_page_url": "https://sakurame.eu.org",
    "items": [
        {
            "id": "https://sakurame.eu.org/2023/06/11/vcbstudio/VapourSynth%E5%9F%BA%E7%A1%80/",
            "url": "https://sakurame.eu.org/2023/06/11/vcbstudio/VapourSynth%E5%9F%BA%E7%A1%80/",
            "title": "VapourSynth基础",
            "date_published": "2023-06-11T03:05:34.000Z",
            "content_html": "<h1 id=\"第五章-vapoursynth基础\"><a class=\"anchor\" href=\"#第五章-vapoursynth基础\">#</a> 第五章 VapourSynth 基础</h1>\n<p>BDRip  的核心是预处理（pre-processing），没有经过预处理的画质调教，压片就只是单纯的数据压缩罢了，永远不可能有画质提升。历史上，最流行的预处理软件是 AviSynth（简称 AVS），然而由于年代久远，其许多设计理念和功能都有较多缺陷，现在逐步被新一代的预处理软件  VapourSynth（简称 VS）替代。本章就来讲解 VS 的基本构成，介绍预览工具和脚本，并从中学习 VS 基本语法和功能。</p>\n<h2 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h2>\n<h2 id=\"1-vs简介\"><a class=\"anchor\" href=\"#1-vs简介\">#</a> 1. VS 简介</h2>\n<p>VapourSynth，简称 VS，官网是 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudmFwb3Vyc3ludGguY29t\">https://www.vapoursynth.com</span>。你可以在 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3ZhcG91cnN5bnRoL3ZhcG91cnN5bnRoL3JlbGVhc2Vz\">Github</span> 上下载最新版本，包括安装版和便携版。</p>\n<p>VCB-Studio 目前使用的 VS 则是娱乐部版，全称 VapourSynth-Classic，简称 VS-C。你可以在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0FtdXNlbWVudENsdWIvdmFwb3Vyc3ludGgtY2xhc3NpYy9yZWxlYXNlcw==\">这里</span>下载最新版。</p>\n<p>VS-C 源于 VS 社区的一次重大分裂。VS 项目开发者在 R55 引入了全新的  API4，这导致了严重的兼容性问题：API4 的 VS 虽然能够同时支持新的 API4 滤镜和旧的 API3 滤镜，但却不支持 API3  脚本。而这些多年传承的脚本才是 VS 发展的精髓，这对于追求稳定生产环境的 VCB-S 来说是不可接受的。</p>\n<p>另一方面，VS 开发者在 API4 还引入了大量破坏性弃用，以迫使用户和滤镜开发者转向 API4。同时还采取先进的 user driven testing，让普通用户积极参与到新版的验证与反馈工作中。</p>\n<p>基于以上复杂情况，总监 Akarin 创立了 VS-C，同时兼容 API3 与 API4 脚本，全力保证生产环境的向后兼容性。此外 VS-C 兼具前后两代 VS 之长，既有 API4 的低内存开销，又有 API3 的高处理速度。</p>\n<p>有了 VS 本体，问题还没有完全解决。上述这些 VS 本体只含有少量的内置滤镜，这显然是远远不够的。收集滤镜和常用工具脚本是一件复杂繁琐的事，这里我们提供了一套打包好的便携版 VS-C，含有大部分常用滤镜和脚本：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0FtdXNlbWVudENsdWIvdG9vbHMvcmVsZWFzZXMlRTMlODAlODI=\">https://github.com/AmusementClub/tools/releases。</span></p>\n<p>打开 VS 目录，我们可以看到 VS 本体的一堆 dll 和 python 环境。VS 本体和滤镜都是由 C++  编写，而它暴露给用户的接口则是 python 的。我们可以通过 python 编写 VS 脚本，然后通过 VSPipe  运行脚本获得输出。你可以认为 VS 是 python 的一个库，也可以认为 VS 使用 python 做 dsl (domain  specific language) 或者更通俗地讲就是 glue（把滤镜给串联起来）。</p>\n<p><code>vapoursynth64</code>  目录下是 VS 滤镜， <code>coreplugins</code>  是内置滤镜， <code>plugins</code>  是第三方滤镜。对于我们提供的 VS-C 包，AI 滤镜相关的模型和运行环境等也放在  <code>plugins</code>  目录。</p>\n<p>同时，我们提供的包里的 python 还内置了 pip，可以方便地安装额外包。</p>\n<p>将这一整套内容打包为便携包不是一件容易的事，事实上在上古时期，VS 基本都是通过安装来使用，这带来了严重的版本管理问题。</p>\n<p>目前我们使用总监 SaltyChiang 开发的打包工具 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0FtdXNlbWVudENsdWIvVmFwb3VyU3ludGgtUG9ydGFibGUtTWFrZXI=\">VapourSynth-Portable-Maker</span> 来完成打包工作，对打包有兴趣的同学可以看看。</p>\n<h2 id=\"-2\"><a class=\"anchor\" href=\"#-2\">#</a> </h2>\n<h2 id=\"2-vs预览\"><a class=\"anchor\" href=\"#2-vs预览\">#</a> 2. VS 预览</h2>\n<p>有了 VSPipe，其实我们就已经可以运行脚本输出处理结果，但我们更希望可以实时修改脚本并看到滤镜的效果，这就需要一个预览器。</p>\n<h3 id=\"-3\"><a class=\"anchor\" href=\"#-3\">#</a> </h3>\n<h3 id=\"1-vapoursynth-editor\"><a class=\"anchor\" href=\"#1-vapoursynth-editor\">#</a> (1). VapourSynth-Editor</h3>\n<p>预览器在很长时间里只有一个， <code>VapourSynth-Editor</code> （简称 vsedit 或 vse），<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0FtdXNlbWVudENsdWIvVmFwb3VyU3ludGgtRWRpdG9yJUUzJTgwJTgydnNl\">https://github.com/AmusementClub/VapourSynth-Editor。vse</span> 是一个 IDE，可以在里面编写 VS 脚本，并进行预览、测试、调试等。它提供了少量的高光和代码补完功能，但不是很完善，只对滤镜起作用，对脚本函数则没有作用。vse 也没有提供代码的查找与替换功能，使用起来不太方便。</p>\n<p>vse 需要依赖 VS 运行，而且原版 vse 优先选择注册表中的 VS 而不是用户指定的 VS，当系统中有多个  VS，或者曾经使用过安装版 VS，那你几乎永远无法知道它使用的是哪个 VS。当然目前娱乐部版已经修复了这个问题，它会优先找同目录的  VS，即开即用。</p>\n<p>一般来说，VS 脚本文件都是 python 脚本，为了区分，我们用  <code>vpy</code>  作为后缀名。</p>\n<p>这里有一个简单预览脚本：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">import</span> vapoursynth as vs</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>from vapoursynth <span class=\"token function\">import</span> core</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">import</span> havsfunc as haf</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">import</span> mvsfunc as mvf</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token string\">\"00010.m2ts\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>src8 <span class=\"token operator\">=</span> core.lsmas.LWLibavSource<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>src8.set_output<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>​</p>\n<p>先看前四句，熟悉 python 的应该知道，这是在载入库。<br />\n第一句载入 vapoursynth 本体，并简称为  <code>vs</code> 。<br />\n第二句载入  <code>vs</code>  的  <code>core</code> 。 <code>core</code>  的概念比较抽象，不妨认为就是一种固定格式。<br />\n这里可以换为等价的写法：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>core <span class=\"token operator\">=</span> vs.core</pre></td></tr></table></figure><p>​</p>\n<p>一些早期的脚本可能会写成：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>core <span class=\"token operator\">=</span> vs.get_core<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>​</p>\n<p>这在 VS-C 中仍然能运行，但  <code>get_core</code>  即将弃用，不要这么写。<br />\n第三四句，载入  <code>mvsfunc</code> （mawen1250 写的工具合集）和  <code>havsfunc</code> （Holy 从 AVS 移植的工具合集），并分别指定别名为  <code>mvf</code>  和  <code>haf</code> ，这是日常做番最常用到的工具。</p>\n<p>再看后三句，这里细节很多，我们一个一个分析。</p>\n<p>首先  <code>a = &quot;00010.m2ts&quot;</code> ，这是指定视频源文件的路径。<br />\n一般写脚本的时候要避免这种单个字母的无脑命名。 但本组约定俗成采用 a 代指输入文件，注意在这之后的 OKE 中会用到。</p>\n<p>这里使用的是相对路径，需要保证 00010.m2ts 和 vpy 脚本在同一目录下。 如果要使用绝对路径，可以这样： <code>a = R&quot;E:\\Anime\\00010.m2ts&quot;</code> 。 这里被 R 引号圈起来的是一个 Raw String，所见即所得，可以避免复杂的转义问题。 不然你就得写： <code>&quot;E:\\\\Anime\\\\00010.m2ts&quot;</code> 。</p>\n<p>第二句  <code>src8 = core.lsmas.LWLibavSource(a)</code> ，这是使用源滤镜  <code>lsmas</code>  载入视频，获取一个在 vs 里称为 clip 的变量，并命名为  <code>src8</code> 。<br />\n除了文件名之外的变量，一般需要有一定意义，方便解读。 通常我们用  <code>src</code>  指代源，8 表示精度，原盘一般都是 8-bit。 而最后的输出结果，则用  <code>res</code>  指代。</p>\n<p>从这一行我们也能看出 vs 滤镜的使用规律，是  <code>core.&lt;package_name&gt;.&lt;filter_name&gt;(...)</code>  的形式。<br />\n这里 lsmas 就是 package_name，而 LWLibavSource 就是 filter_name。<br />\n脚本函数（比如上面提到的 mvf 和 haf）的使用则有些不同，是  <code>&lt;package_name&gt;.&lt;function_name&gt;(...)</code>  的形式，这一点我们会在后面看到。</p>\n<p>最后，使用  <code>set_output()</code>  将读入的视频输出。</p>\n<p>现在我们尝试使用 vsedit 来运行脚本。</p>\n<p>如果你的滤镜载入正确，vsedit 应该可以高亮显示滤镜名称。 在上方工具栏选择  <code>Script - Check script</code> ，或者按  <code>F6</code> ，就可以检查脚本是否能正常输出。 如果是第一次读取某个视频文件，LWLibavSource 会生成一个后缀为  <code>lwi</code>  的索引文件，便于以后再次读取视频。 源文件越大，需要的时间越多，对于好几个 GB 的蓝光原盘需要等待几分钟。SSD 硬盘的话会快很多。</p>\n<p>没有脚本没有问题，可以在 vsedit 下方看到如下信息。</p>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B05%5D%20VapourSynth%E5%9F%BA%E7%A1%80/media/image01.png\" alt=\"img\" /></p>\n<p>否则会告诉你存在什么问题。</p>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B05%5D%20VapourSynth%E5%9F%BA%E7%A1%80/media/image02.png\" alt=\"img\" /></p>\n<p>输出的信息，包括：总帧数、时长、分辨率、帧率、像素格式。</p>\n<p>注意 VS 里帧数是 0-indexed 的，比如这个视频的帧数就是 0-16711，一共 16712 帧。帧率 24000/1001=23.976，这个数字要牢记，这是日本动画的典型帧率。 最后像素格式 YUV420P8，说明这是 YUV 色彩空间，420 下采样，数据位深为 8-bit。</p>\n<p>检查完了这些，就可以用  <code>Script - Preview</code> ，或者按  <code>F5</code>  来预览实际画面。</p>\n<p>它会打开一个预览窗口，其中包含许多方便的功能。上方窗口可以拖动浏览整个画面，键盘上的前后键可以调整到上一帧或者下一帧。</p>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B05%5D%20VapourSynth%E5%9F%BA%E7%A1%80/media/image03.png\" alt=\"img\" /></p>\n<p>左下角，可以点击进度条跳转到目标帧，也可以输入帧号定位。按三角形可以播放，旁边可以调整播放帧率。</p>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B05%5D%20VapourSynth%E5%9F%BA%E7%A1%80/media/image04.png\" alt=\"img\" /></p>\n<p>右下角，点击画笔可以开启取色功能。鼠标移到画面上可以在左下角显示像素的 YUV 值以及渲染后的 RGB 值。</p>\n<p>右下角还有放大镜 zoom 的选项，切换到  <code>fixed radio</code>  可以按倍数放大缩小，方便观察。可以选择缩放算法， <code>Nearest</code>  或者  <code>Bilinear</code> 。<br />\nNearest 是完全没有运算，只是单纯复制粘贴的缩放方法，将原来的 1 个像素变成 4 个，9 个，16 个...<br />\n 注意不要用 Nearest 进行缩小或者非整数倍的放大，锯齿非常恐怖。<br />\nBilinear 是使用插值进行缩放，它是最简单的线性插值，所以一般也不会引入额外的副作用。我们通常都用 Nearest 放大进行观察，除了观察锯齿的时候，可能会用 Bilinear。</p>\n<p>前面取色的时候我们看到，输出的 YUV 实际被渲染为 RGB 呈现，这是 vsedit 自动帮我们做了。但是 vsedit 做的精度不佳，所以我们通常在脚本里手动转为 RGB 进行预览。</p>\n<p>我们把脚本改为：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>src8 <span class=\"token operator\">=</span> core.lsmas.LWLibavSource<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>res <span class=\"token operator\">=</span> mvf.ToRGB<span class=\"token punctuation\">(</span>src8<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>res.set_output<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>​</p>\n<p>再预览看看，有什么区别。 可以发现现在格式变为  <code>RGB24</code>  了。 注意这里调用 mvf，跟调用滤镜的区别，前面已经提到过了。</p>\n<p>下面，找一个 10-bit 的视频（比如本组压制的成品），用同样的脚本再预览，看看有啥区别。 可以发现现在格式变为  <code>RGB30</code>  了。<br />\n然后再改为  <code>src8.set_output()</code>  看看，可以发现格式变为  <code>YUV420P10</code> 。 所以 LWILibavSource 读取源的时候，是准确的读取了源的全部精度。</p>\n<p>当然实际上 vsedit 渲染时，还是采用 RGB24，这可以利用取色器看到。 这是合理的，因为大部分人的显示器仍然还是 8-bit。</p>\n<p>因此我们预览输出时，习惯是无论什么精度的源，都输出 8-bit RGB。 这可以通过  <code>res = mvf.ToRGB(src8, depth=8)</code>  或者  <code>res = mvf.Preview(src8)</code>  来实现。 这也是日常截图最标准的方法。</p>\n<h3 id=\"-4\"><a class=\"anchor\" href=\"#-4\">#</a> </h3>\n<h3 id=\"2-vapoursynth-preview\"><a class=\"anchor\" href=\"#2-vapoursynth-preview\">#</a> (2). VapourSynth-Preview</h3>\n<p><code>VapourSynth-Preview</code> （简称 vspreview 或 vsp）是近两年兴起的另一个预览器，区别于 vsedit 的独立程序，vsp 是由 python 编写的模块，因此可以直接集成到 python 环境中。</p>\n<p>vsp 的初始 repo 已经不再维护，因此目前版本繁多。我们使用的娱乐部版（也是 portable 包中集成的版本）：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0FrYXJpblZTL3ZhcG91cnN5bnRoLXByZXZpZXclRTMlODAlODIlRTUlOEYlQTYlRTQlQjglODAlRTQlQjglQUElRTYlQjQlQkIlRTglQjclODMlRTclOUElODQlRTclODklODglRTYlOUMlQUMlRTYlOTglQUY=\">https://github.com/AkarinVS/vapoursynth-preview。另一个活跃的版本是</span> iew 版：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0lycmF0aW9uYWwtRW5jb2RpbmctV2l6YXJkcnkvdnMtcHJldmlldyVFMyU4MCU4Mg==\">https://github.com/Irrational-Encoding-Wizardry/vs-preview。</span></p>\n<p>注意 iew 版与 VapourSynth-Classic 并不完全兼容，如果你有兴趣尝试一些新功能，可以使用这个兼容 VS-C 的版本：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1NhbHR5Q2hpYW5nL3ZzLXByZXZpZXcvdHJlZS9uby12c3Rvb2xzJUUzJTgwJTgy\">https://github.com/SaltyChiang/vs-preview/tree/no-vstools。</span></p>\n<p>vspreview 可以直接通过 pip 安装，参考上述 repo 的说明。目前 portable 包中已经预先安装好，可以通过下述命令使用（注意把  <code>python</code>  换成完整路径）：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python <span class=\"token parameter variable\">-m</span> vspreview xxx.vpy</pre></td></tr></table></figure><p>​</p>\n<p>成功的话会弹出类似 vsedit 的预览窗口。</p>\n<p>与 vsedit 不同，vsp 本体只是一个预览器，而不是一个 IDE，因此只能预览脚本，而无法编写脚本。为了方便使用，通常需要配合其他文本编辑器或者 IDE，下面介绍一个基于  <code>VSCode</code>  的开发环境搭建方案。</p>\n<h4 id=\"-5\"><a class=\"anchor\" href=\"#-5\">#</a> </h4>\n<h4 id=\"vscode\"><a class=\"anchor\" href=\"#vscode\">#</a> VSCode</h4>\n<ol>\n<li>安装  <code>VSCode</code> ，并在扩展商店里安装  <code>Python</code>  和  <code>Pylance</code>  扩展。</li>\n<li>将本章  <code>.vscode</code>  目录的文件复制到 VSCode 用户配置目录  <code>%APPDATA%\\Code\\User\\</code> 。如果用户配置目录已经有同名文件，不要覆盖，将相应内容复制到原有文件中。</li>\n<li>修改  <code>settings.json</code>  中的 python 路径，改为你的 VapourSynth 对应的 python 路径。</li>\n</ol>\n<h4 id=\"-6\"><a class=\"anchor\" href=\"#-6\">#</a> </h4>\n<h4 id=\"vapoursynth\"><a class=\"anchor\" href=\"#vapoursynth\">#</a> VapourSynth</h4>\n<ol>\n<li>安装 VapourSynth-Preview。可参考上述 repo 的说明，如果使用我们的 portable 包则不必再安装。</li>\n<li>安装 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1NhbHR5Q2hpYW5nL1ZhcG91clN5bnRoLVBsdWdpbnMtU3R1Yi1HZW5lcmF0b3IvdHJlZS9SNTdDbGFzc2lj\">VapourSynth-Plugins-Stub-Generator</span>。这是由总监 SaltyChiang 开发的小工具，用于在 VSCode 里支持代码补全。同样，portable 包中已经集成，不必再安装。 如果首次安装，运行  <code>python -m vsstubs install</code> ，如果使用 portable 包，运行  <code>python -m vsstubs update</code> 。注意以后每次增加滤镜都需要重新 update。</li>\n</ol>\n<p>以上，我们就配置好了全部所需内容。现在使用 VSCode 打开 vpy 脚本（或者所在文件夹），如果配置成功，可以看到脚本高亮和语法补全信息。接下来可以使用  <code>Ctrl+F6/Ctrl+F5</code>  进行类似 vsedit 的 F6/F5 的脚本检查 / 预览。不过这里的脚本检查只检查是否正常运行，不提供 vsedit 那样的 clip 信息。</p>\n<p>我们的配置还提供了额外两个功能： <code>Ctrl+F7</code> ，相当于 vs info，打印输出 clip 的信息； <code>Ctrl+F8</code> ，相当于 vs benchmark，计算输出 clip 的所有帧，可以测试脚本速度。</p>\n<p>vsp 的基本功能与 vsedit 差别不大，但更加易于使用。</p>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B05%5D%20VapourSynth%E5%9F%BA%E7%A1%80/media/image05.png\" alt=\"img\" /></p>\n<p>左下角，最底下一栏显示 clip 信息，与 vsedit 类似，这里多了一个帧类型信息，可以看到这一帧为 P 帧。<br />\n上面一栏，从左开始， <code>output</code>  按钮选择输出节点，后面  <code>sync outputs</code>  选择是否在节点间同步，这个功能我们后面再说。<br />\n第二个按钮指定帧号，第三个指定时间戳，后面 100% 的按钮选择缩放倍率，vsp 里默认是 Nearest 算法。最后  <code>Timeline</code>  可以切换时间轴按时间戳显示还是按帧号显示。</p>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B05%5D%20VapourSynth%E5%9F%BA%E7%A1%80/media/image06.png\" alt=\"img\" /></p>\n<p>右下角 5 个功能，每个功能都可以独立开启或关闭，我们一个一个说。</p>\n<ol>\n<li>Playback</li>\n</ol>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B05%5D%20VapourSynth%E5%9F%BA%E7%A1%80/media/image07.png\" alt=\"img\" /></p>\n<p>就是各种播放选项，中间按钮播放 / 暂停，可以在最后边控制播放速度，选择  <code>Unlimited FPS</code>  可以最高速度播放，实际速度取决于输出 clip 所用滤镜和最后渲染的速度。</p>\n<p>播放键左右依次，一个箭头的是以 1 帧为单位后退 / 前进，两个箭头的是以右边指定的帧数为单位后退 / 前进，三个箭头直接转到第一帧 / 最后一帧。</p>\n<ol>\n<li>Scening</li>\n</ol>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B05%5D%20VapourSynth%E5%9F%BA%E7%A1%80/media/image08.png\" alt=\"img\" /></p>\n<p>在时间轴上做标记，在分段或者采样典型场景的时候会很有用。</p>\n<p><code>List</code>  表示一组标记，时间轴只能同时显示一组标记，但可以在多组之间切换。 <code>Add List</code>  创建一组标记，然后可以在下方一栏添加标记。<br />\n <code>AB</code>  直接标记当前帧，并添加到 List。 <code>A</code>  将当前帧标记为起点， <code>B</code>  将当前帧标记为终点，A、B 联合使用可以标记一段区间，然后点  <code>Add to List</code>  加入到 List 中。</p>\n<p>最右边的按钮可以导出当前 List 的所有标记，可以手动调整导出格式，导出后存放在剪切板里，找个地方粘贴即可。</p>\n<ol>\n<li>Pipette</li>\n</ol>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B05%5D%20VapourSynth%E5%9F%BA%E7%A1%80/media/image09.png\" alt=\"img\" /></p>\n<p>这个功能相当于 vsedit 的取色器，鼠标移到画面上可以在左下角显示像素的 YUV 值以及渲染后的 RGB 值。</p>\n<p>从左到右依次为：坐标  <code>(x, y)</code> ，渲染后 RGB 值，输出 clip 原始像素值。<br />\n视频里的坐标轴以左上角为原点，横向向右为 x 轴正向，竖向向下为 y 轴正向。<br />\n原始和渲染后的像素都有 3 组表示，第一组是 16 进制的量化值，第二组是 10 进制的量化值，第三组是浮点值。</p>\n<p>vsp 采用 vs 滤镜来渲染输出 clip，不像 vse 那样有较大精度问题，因此一般可以直接 set_output 输出，不用转为 RGB。</p>\n<ol>\n<li>Benchmark</li>\n</ol>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B05%5D%20VapourSynth%E5%9F%BA%E7%A1%80/media/image10.png\" alt=\"img\" /></p>\n<p>就是跑测试输出，与之前说的 Ctrl+F8 快捷键相比，可以更精确地指定输出的帧数范围。</p>\n<ol>\n<li>Misc</li>\n</ol>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B05%5D%20VapourSynth%E5%9F%BA%E7%A1%80/media/image11.png\" alt=\"img\" /></p>\n<p><code>Reload Script</code>  如果你更改了脚本，可以按这个重新加载。<br />\n <code>Save</code>  导出 vsp 设置，比如前面提到的部分选项，它可以记忆下来，下次打开直接启用。当然一般不需要这个功能，因为 vsp 会自动保存到脚本所在目录的  <code>.vspreview</code>  目录下。<br />\n <code>Copy Frame</code>  /  <code>Save Frame as</code>  可以复制 / 保存当前帧截图，右边可以设置导出文件名。</p>\n<p>好了，经典版 vsp 的功能就讲这么多，其中一些功能有快捷键：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0VuZGlsbGwvdmFwb3Vyc3ludGgtcHJldmlldy93aWtpL0tleWJvYXJkLVNob3J0Y3V0cyVFMyU4MCU4Mg==\">https://github.com/Endilll/vapoursynth-preview/wiki/Keyboard-Shortcuts。</span></p>\n<p>另外，前面提到的一些改版，有兴趣的话可以自行研究它们的新功能。</p>\n<h3 id=\"-7\"><a class=\"anchor\" href=\"#-7\">#</a> </h3>\n<h3 id=\"3-对比脚本\"><a class=\"anchor\" href=\"#3-对比脚本\">#</a> (3). 对比脚本</h3>\n<p>对比脚本，顾名思义就是用来对比源和压制成品的脚本。</p>\n<p>下面是一个简单的对比脚本：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">import</span> vapoursynth as vs</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>from vapoursynth <span class=\"token function\">import</span> core</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">import</span> havsfunc as haf</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">import</span> mvsfunc as mvf</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>a <span class=\"token operator\">=</span> R<span class=\"token string\">\"D:\\VCB-Studio Entry Test 2023\\Q4 [E46686C4].m2ts\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>src8 <span class=\"token operator\">=</span> core.lsmas.LWLibavSource<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>src8 <span class=\"token operator\">=</span> mvf.Preview<span class=\"token punctuation\">(</span>src8<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>src8.set_output<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>b <span class=\"token operator\">=</span> R<span class=\"token string\">\"D:\\VCB-Studio Entry Test 2023\\Q4_AV1 [41A7EDDA].mkv\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>rip <span class=\"token operator\">=</span> core.lsmas.LWLibavSource<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>rip <span class=\"token operator\">=</span> mvf.Preview<span class=\"token punctuation\">(</span>rip<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>rip.set_output<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>​</p>\n<p>现在用 vse 预览试试，在键盘上按数字 0、1 来切换两个输出。<br />\n如果你试图切换到不存在的节点就会。<br />\n<img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B05%5D%20VapourSynth%E5%9F%BA%E7%A1%80/media/image12.png\" alt=\"img\" /></p>\n<p>这里在 set_output 时使用了不同的输出节点。在以前，只有 0 节点（也是不指定输出节点时的默认值）能被预览输出，而 vspipe 始终只能输出 0 节点的 clip。预览器 vsp 首先支持了多节点预览输出，之后 vsedit 也添加了相应功能。</p>\n<p>vsedit 的输出节点与键盘数字是绑定的，也就是最多只能有 0-9 号共 10 个节点可以使用，并且 vsedit 要求必须至少有 0 节点。<br />\n当然，你可以输出到更高数字的节点，脚本仍然可以运行，但无法在 vsedit 中预览到。</p>\n<p>作为多节点输出的开创者，vsp 对这一功能的支持更加完善。<br />\nvsp 的输出节点不与键盘数字绑定，而是按照脚本中 set_output 出现的先后顺序，依次对应到键盘数字：1、2、3... 同时也不要求一定有 0 节点输出。</p>\n<p>不使用键盘数字 0 作为第一个快捷键可以优化没有小键盘时的体验，输出节点数字不绑定快捷键可以避免不停修改节点值。当然 vsp 也不支持过多的节点数，超过 10 个节点只能在左下角的下拉框中切换。不过你可以自行修改 vsp 的配置，因为它是一个 python  module，你可以自由修改其功能，比如绑定节点数字，比如扩展更多键位。</p>\n<p>之前略过的一个按钮， <code>sync outputs</code> ，可以选择让所有输出节点指向同一帧，或者各自维护一个当前帧号。</p>\n<p>在上古时期，没有多节点输出的时候，是用  <code>Interleave</code>  滤镜来进行对比预览的。试着在上述脚本最后加上下面两行，观察结果。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>res <span class=\"token operator\">=</span> core.std.Interleave<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>src8, rip<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>res.set_output<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>​</p>\n<p>可以发现，视频总时长不变，输出帧数翻倍，帧率也翻倍，变成了 47.952 fps。<br />\n实际上滤镜是在一秒内把源和成品的帧都给塞进去了，偶数帧（0, 2, 4...）来自源，奇数帧（1, 3, 5...）来自成品。这样可以通过前后键，反复观察源和成品的画面区别。</p>\n<p>Interleave 支持输入一个 clip 列表，把里面的 clip 依次交错输出。自然你也可以将多个 clip  一起交错对比，但是多于两个的时候有诸多不便，首先你无法直观从帧号判断这帧来自哪个 clip，其次越过一些帧对比，比如将 1 和 3  进行对比时无法快速切换。<br />\n当然现在是好时代了，可以通过多节点输出自由地进行对比。</p>\n<h2 id=\"-8\"><a class=\"anchor\" href=\"#-8\">#</a> </h2>\n<h2 id=\"3-vs文档阅读和参数传递\"><a class=\"anchor\" href=\"#3-vs文档阅读和参数传递\">#</a> 3. VS 文档阅读和参数传递</h2>\n<h3 id=\"-9\"><a class=\"anchor\" href=\"#-9\">#</a> </h3>\n<h3 id=\"1-文档阅读\"><a class=\"anchor\" href=\"#1-文档阅读\">#</a> (1). 文档阅读</h3>\n<p>今后我们将遇到各种各样的滤镜，虽然代码补全可以帮助我们知道它的参数，但具体每个参数的含义和用法，还是需要查阅相关文档。</p>\n<p>VS-C 的文档链接如下：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hbXVzZW1lbnRjbHViLmdpdGh1Yi5pby9kb2MvJUUzJTgwJTgy\">https://amusementclub.github.io/doc/。</span></p>\n<p>其中包括 VS 相关的 python 数据结构文档，内置滤镜的文档以及 VSPipe 的用法等。</p>\n<p>第三方滤镜，一般都有单独的 Github repo，你需要善于搜索。一般可以先去娱乐部看一下，大部分常用滤镜都有相应 fork。</p>\n<p>先来看前面提到的  <code>Interleave</code>  滤镜，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hbXVzZW1lbnRjbHViLmdpdGh1Yi5pby9kb2MvZnVuY3Rpb25zL3ZpZGVvL2ludGVybGVhdmUuaHRtbCVFMyU4MCU4Mg==\">https://amusementclub.github.io/doc/functions/video/interleave.html。</span></p>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B05%5D%20VapourSynth%E5%9F%BA%E7%A1%80/media/image13.png\" alt=\"img\" /></p>\n<p>滤镜的包名  <code>std</code> ，说明是标准内置滤镜。 再看滤镜参数，第一个必选参数是  <code>vnode[]</code> ，即多个 clip 组成的列表。后半部分由 [] 扩起来的，是可选参数，包括  <code>extend, mismatch, modify_duration</code> ，都是 bint，也就是 0/1，或者 False/True。它们的功能 doc 里都有说明，不需要掌握，平时根本用不到。</p>\n<h3 id=\"-10\"><a class=\"anchor\" href=\"#-10\">#</a> </h3>\n<h3 id=\"2-参数传递\"><a class=\"anchor\" href=\"#2-参数传递\">#</a> (2). 参数传递</h3>\n<p>VS 中的参数传递有多种方式：关键字传参、位置传参、混合传参。</p>\n<ol>\n<li>关键字传参 keyword argument</li>\n</ol>\n<p>比如：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>core.std.Interleave<span class=\"token punctuation\">(</span>clips<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>src, rip<span class=\"token punctuation\">]</span>, <span class=\"token assign-left variable\">extend</span><span class=\"token operator\">=</span><span class=\"token number\">0</span>, <span class=\"token assign-left variable\">modify_duration</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>​</p>\n<p>哪个输入对应哪个参数，直接用参数名写出来。这样可读性很高，也不容易出错。另外，现在有代码补全，也不需要手打参数名。</p>\n<ol>\n<li>位置传参 positional argument</li>\n</ol>\n<p>比如：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>core.std.Interleave<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>src, rip<span class=\"token punctuation\">]</span>, <span class=\"token number\">0</span>, <span class=\"token number\">1</span>, <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>​</p>\n<p>从左到右将输入依次赋给各个参数。写起来最简单，但可读性很差，要翻 doc 才知道各个参数都给的什么值。</p>\n<ol>\n<li>混合传参</li>\n</ol>\n<p>顾名思义就是混合前两种方式。python（和几乎所有编程语言）都规定，函数参数的必选项在前面，可选项在后面。因此习惯前面常用的参数用位置传参，后面不常用的参数使用关键字传参。注意位置传参只能放在前面，不能和关键字交替使用。</p>\n<p>比如：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>core.std.Interleave<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>src, rip<span class=\"token punctuation\">]</span>, <span class=\"token assign-left variable\">modify_duration</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>​</p>\n<p>这里需要注意的是，VS 滤镜和 python 函数（比如 mvf 提供的函数）的处理是不一样的。<br />\n对于 VS 滤镜，它会先将所有关键字参数赋值好，然后将位置参数从左到右依次赋给<strong>还未赋值</strong>的参数。</p>\n<p>比如：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>core.std.Interleave<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>src, rip<span class=\"token punctuation\">]</span>, <span class=\"token number\">1</span>, <span class=\"token assign-left variable\">extend</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>​</p>\n<p>这个调用会先将 extend 赋为 0，然后 [src, rip] 赋给 clips，最后一个参数，按位置将赋给 extend，但发现以前已经赋值过了，因此会赋给第三个参数 mismatch。</p>\n<p>但是 python 函数并不会这么处理，如果关键字传参和位置传参对同一参数赋值，会报出语法错误。</p>\n<p>比如：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mvf.ToRGB<span class=\"token punctuation\">(</span>res, <span class=\"token number\">10</span>, <span class=\"token assign-left variable\">matrix</span><span class=\"token operator\">=</span><span class=\"token string\">\"709\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>​</p>\n<p>这个调用会报出对同一位置赋值的错误。</p>\n<ol>\n<li>dict 传参</li>\n</ol>\n<p>这其实是关键字传参的一种变体，用一个 dict 描述关键字，然后用 dict 传入参数。</p>\n<p>比如：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>kwargs <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"depth\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token number\">10</span>, <span class=\"token string\">\"matrix\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"709\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>res <span class=\"token operator\">=</span> mvf.ToRGB<span class=\"token punctuation\">(</span>src, **kwargs<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>​</p>\n<ol>\n<li>iterable 传参</li>\n</ol>\n<p>这其实是位置传参的一种变体，用一个 iterable 对象描述待传参数。<br />\n这种传参方式对位置要求严格，要传的参数必须按函数参数列表的位置依次给出。<br />\n实际上这在 VS 里极少出现，也不推荐使用这种方式，一般只会在阅读复杂代码时遇到。</p>\n<p>比如：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"709\"</span>, <span class=\"token number\">10</span>, vs.INTEGER, False<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>res <span class=\"token operator\">=</span> mvf.ToRGB<span class=\"token punctuation\">(</span>src, *args<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>​</p>\n<ol>\n<li>滤镜串联</li>\n</ol>\n<p>VS 滤镜都是由 clip 作为第一个参数，在连续调用时可以串联，省去输入第一个参数。</p>\n<p>比如：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>res <span class=\"token operator\">=</span> core.lsmas.LWLibavSource<span class=\"token punctuation\">(</span><span class=\"token string\">\"00001.m2ts\"</span><span class=\"token punctuation\">)</span>.rgvs.RemoveGrain<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>​</p>\n<p>这等价于：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>src <span class=\"token operator\">=</span> core.lsmas.LWLibavSource<span class=\"token punctuation\">(</span><span class=\"token string\">\"00001.m2ts\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>res <span class=\"token operator\">=</span> core.rgvs.RemoveGrain<span class=\"token punctuation\">(</span>src, <span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>​</p>\n<p>串联滤镜可以连接任意多个，除了第一个要写 core，后面的滤镜都不用写，直接跟在前一个滤镜的后面写滤镜名就行。同时，后面串联的滤镜也不用写第一个 clip 参数。</p>\n<p>但是对于 python 函数，mvf 那种，就没有这样的写法，只能老老实实分为多行调用。</p>\n<p>或者像下面这样：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>res <span class=\"token operator\">=</span> mvf.Preview<span class=\"token punctuation\">(</span>core.lsmas.LWLibavSource<span class=\"token punctuation\">(</span><span class=\"token string\">\"00001.m2ts\"</span><span class=\"token punctuation\">))</span></pre></td></tr></table></figure><p>​</p>\n<h2 id=\"-11\"><a class=\"anchor\" href=\"#-11\">#</a> </h2>\n<h2 id=\"4-视频属性和帧属性\"><a class=\"anchor\" href=\"#4-视频属性和帧属性\">#</a> 4. 视频属性和帧属性</h2>\n<h3 id=\"-12\"><a class=\"anchor\" href=\"#-12\">#</a> </h3>\n<h3 id=\"1-视频属性-clip-property\"><a class=\"anchor\" href=\"#1-视频属性-clip-property\">#</a> (1). 视频属性 clip property</h3>\n<p>clip 对象，在 VS 里是 VideoNode 类。 文档在：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hbXVzZW1lbnRjbHViLmdpdGh1Yi5pby9kb2MvcHl0aG9ucmVmZXJlbmNlLmh0bWwjVmlkZW9Ob2RlJUUzJTgwJTgy\">https://amusementclub.github.io/doc/pythonreference.html#VideoNode。</span></p>\n<p>这里常用的就是前几个属性，包括：视频格式  <code>format</code> ，宽度  <code>width</code> ，高度  <code>height</code> ，总帧数  <code>num_frames</code> ，帧率  <code>fps</code>  或者用两个整数表示的  <code>fps_num</code>  和  <code>fps_den</code> 。</p>\n<p>可以使用</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>print<span class=\"token punctuation\">(</span>clip.format<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>​</p>\n<p>运行时在终端里打印这些信息。当然，vsedit 是看不到的。</p>\n<p>我们可以使用  <code>text.ClipInfo</code>  滤镜在画面上打印 clip 信息。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>res <span class=\"token operator\">=</span> res.text.ClipInfo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>res.set_output<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>​</p>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B05%5D%20VapourSynth%E5%9F%BA%E7%A1%80/media/image14.png\" alt=\"img\" /></p>\n<h3 id=\"-13\"><a class=\"anchor\" href=\"#-13\">#</a> </h3>\n<h3 id=\"2-帧属性-frame-property\"><a class=\"anchor\" href=\"#2-帧属性-frame-property\">#</a> (2). 帧属性 frame property</h3>\n<p>除了 clip 对象，还有一个需要关注的，帧对象，在 VS 叫做 VideoFrame 类。 文档在：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hbXVzZW1lbnRjbHViLmdpdGh1Yi5pby9kb2MvcHl0aG9ucmVmZXJlbmNlLmh0bWwjVmlkZW9GcmFtZSVFMyU4MCU4Mg==\">https://amusementclub.github.io/doc/pythonreference.html#VideoFrame。</span></p>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B05%5D%20VapourSynth%E5%9F%BA%E7%A1%80/media/image15.png\" alt=\"img\" /></p>\n<p>这里我们主要关注的是  <code>props</code>  属性。<br />\n可以通过  <code>text.FrameProps</code>  滤镜在画面上打印每帧的 props 信息。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>res <span class=\"token operator\">=</span> res.text.FrameProps<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>res.set_output<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>​</p>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B05%5D%20VapourSynth%E5%9F%BA%E7%A1%80/media/image16.png\" alt=\"img\" /></p>\n<p>其中重要的属性包括： <code>_PictType, _ChromaLocation, _ColorRange, _Matrix, _Primaries, _Transfer, _FieldBased</code> 。</p>\n<p>根据文档给的链接，我们看到它们的具体定义。</p>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B05%5D%20VapourSynth%E5%9F%BA%E7%A1%80/media/image17.png\" alt=\"img\" /></p>\n<p><code>_PictType</code> ，帧类型，包括  <code>I/B/P</code>  帧。</p>\n<p><code>_ChromaLocation</code> ，色度平面的对齐方式，最常见的，也即是 MPEG-2 标准的左中对齐为  <code>left=0</code> 。</p>\n<p><code>_ColorRange</code> ，数值范围，这里很反直觉的是， <code>full=0</code> ， <code>limited=1</code> 。事实上除了 frame props，其他地方都是  <code>full=1</code> ， <code>limited=0</code> 。另外文档也给出了具体的计算公式。</p>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B05%5D%20VapourSynth%E5%9F%BA%E7%A1%80/media/image18.png\" alt=\"img\" /></p>\n<p><code>_Matrix, _Primaries, _Transfer</code> ，需要记住  <code>&quot;709&quot;=1</code> ， <code>&quot;601&quot;=6</code> ，其他的用到时查文档。</p>\n<p><code>_FieldBased</code> ，场类型，0 逐行，1 底场优先，2 顶场优先。这个属性会在之后的 30 fps 课程中用到。</p>\n<p>在实际操作中，我们可以手动更改这些 frame props。</p>\n<p>设置 / 删除 frame props 的用法如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>res <span class=\"token operator\">=</span> core.std.SetFrameProps<span class=\"token punctuation\">(</span>res, <span class=\"token assign-left variable\">_Matrix</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>res <span class=\"token operator\">=</span> core.std.RemoveFrameProps<span class=\"token punctuation\">(</span>res, <span class=\"token string\">\"_Matrix\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>​</p>\n<p>实际上我们可以设置任意名字的 frame props，但它们大部分时候并没有用处。而这些由 VS 保留的 frame props 则有重要功能，一些滤镜比如  <code>resize</code>  会读取它们来决定进行何种计算，如果 frame props 指定的不正确就可能产生预料之外的错误结果。</p>\n<p>一般来说，对于 1080p 的视频不需要刻意关注  <code>_Matrix, _Primaries, _Transfer</code>  等等，它们在未指定或者不存在时，滤镜会自动 fallback 到 709 对应的值。但是在制作 DVD 或者 UHD 等特殊分辨率的视频时，就需要特别关注这些 frame props，确保它们符合相应规范。</p>\n<h2 id=\"-14\"><a class=\"anchor\" href=\"#-14\">#</a> </h2>\n<h2 id=\"5-vspipe的使用\"><a class=\"anchor\" href=\"#5-vspipe的使用\">#</a> 5. VSPipe 的使用</h2>\n<p><code>VSPipe</code>  是运行脚本，输出视频的核心工具。 文档在：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hbXVzZW1lbnRjbHViLmdpdGh1Yi5pby9kb2Mvb3V0cHV0Lmh0bWwlRTMlODAlODI=\">https://amusementclub.github.io/doc/output.html。</span></p>\n<ol>\n<li>输出给 x265 进行压制</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vspipe.exe <span class=\"token parameter variable\">--y4m</span> script.vpy - <span class=\"token operator\">|</span> x265.exe <span class=\"token parameter variable\">--y4m</span> <span class=\"token parameter variable\">-D</span> <span class=\"token number\">10</span> <span class=\"token parameter variable\">--output</span> <span class=\"token string\">\"output.hevc\"</span> -</pre></td></tr></table></figure><p>​</p>\n<p>注意必须在标准命令行  <code>cmd</code>  里使用上述 pipe 方式， <code>PowerShell</code>  容易出现一些奇怪问题。</p>\n<ol>\n<li>输出 y4m 文件</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vspipe.exe <span class=\"token parameter variable\">--y4m</span> script.vpy output.y4m</pre></td></tr></table></figure><p>​</p>\n<p>当然也可以输出 yuv 文件。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vspipe.exe script.vpy output.yuv</pre></td></tr></table></figure><p>​</p>\n<p>yuv 和 y4m 都是无压缩的视频数据，区别在于后者自带了分辨率、帧率、像素格式等有效信息，而前者就是单纯的数据。<br />\n事实上我们可以计算 yuv 文件的大小。假设目前有一个 35000 帧，分辨率为 1920x1080，像素格式 YUV420P8 的 yuv 视频，那么它的视频体积为：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">35000</span> * <span class=\"token punctuation\">(</span><span class=\"token number\">1920</span> * <span class=\"token number\">1080</span> + <span class=\"token number\">2</span> * <span class=\"token punctuation\">(</span><span class=\"token number\">1920</span> / <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> * <span class=\"token punctuation\">(</span><span class=\"token number\">1080</span> / <span class=\"token number\">2</span><span class=\"token punctuation\">))</span> * <span class=\"token number\">8</span> bit <span class=\"token operator\">=</span> <span class=\"token number\">108,864</span>,000,000 B ~<span class=\"token operator\">=</span> <span class=\"token number\">101.3875</span> GiB</pre></td></tr></table></figure><p>​</p>\n<p>如果数据位深为 10-bit 或者 16-bit，那么每个像素分量占据 2 个字节，计算也是类似的。</p>\n<ol>\n<li>只计算各帧但不输出（用于测试脚本速度）</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vspipe.exe <span class=\"token parameter variable\">-p</span> script.vpy <span class=\"token builtin class-name\">.</span></pre></td></tr></table></figure><p>​</p>\n<h2 id=\"-15\"><a class=\"anchor\" href=\"#-15\">#</a> </h2>\n<h2 id=\"6-练习\"><a class=\"anchor\" href=\"#6-练习\">#</a> 6. 练习</h2>\n<h3 id=\"-16\"><a class=\"anchor\" href=\"#-16\">#</a> </h3>\n<h3 id=\"1\"><a class=\"anchor\" href=\"#1\">#</a> (1)</h3>\n<p>熟悉  <code>vsedit</code> 、 <code>vspreview</code> 、 <code>vspipe</code>  的使用。</p>\n<h3 id=\"-17\"><a class=\"anchor\" href=\"#-17\">#</a> </h3>\n<h3 id=\"2\"><a class=\"anchor\" href=\"#2\">#</a> (2)</h3>\n<p>阅读文档并学习以下滤镜的用法： <code>BlankClip, StackVertical, StackHorizontal, AssumeFPS, Minimum, Maximum, Reverse, Transpose, Turn180</code> 。</p>\n",
            "tags": [
                "压制技术"
            ]
        },
        {
            "id": "https://sakurame.eu.org/2023/06/11/vcbstudio/%E8%AE%A4%E8%AF%86%E7%91%95%E7%96%B5/",
            "url": "https://sakurame.eu.org/2023/06/11/vcbstudio/%E8%AE%A4%E8%AF%86%E7%91%95%E7%96%B5/",
            "title": "认识瑕疵",
            "date_published": "2023-06-11T03:02:50.000Z",
            "content_html": "<h1 id=\"第四章-认识瑕疵\"><a class=\"anchor\" href=\"#第四章-认识瑕疵\">#</a> 第四章 认识瑕疵</h1>\n<p>BDRip 制作的绝大部分时间，实际上是在与各种各样的画质瑕疵进行斗争。而对瑕疵处理的好坏，也决定着一个 Ripper 的水平。对于所有入门压制的新手来说，了解你的 “敌人”，是最重要的第一步。</p>\n<p>对于本章中的所有图片，强烈建议单独打开，以 100% 无缩放进行观察。</p>\n<h2 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h2>\n<h2 id=\"1-画面要素\"><a class=\"anchor\" href=\"#1-画面要素\">#</a> 1. 画面要素</h2>\n<p>在介绍画质瑕疵之前，我们首先来简单介绍基本的画面要素。这有助于我们把握画面的重点，有针对性地去寻找瑕疵。</p>\n<h3 id=\"-2\"><a class=\"anchor\" href=\"#-2\">#</a> </h3>\n<h3 id=\"1-空间上的频率划分平面纹理和线条\"><a class=\"anchor\" href=\"#1-空间上的频率划分平面纹理和线条\">#</a> (1). 空间上的频率划分：平面，纹理和线条</h3>\n<p>在视频处理中，空间 (spatial) 的概念指的是一帧图片以内的像素变化。从频率的角度看，任何画面区域都是多种复杂频率的混合体，但其不同区域的各种频率所占比重有明显区别。</p>\n<p>像素变化较快，变动幅度大的区域，高频分量占据主导地位。像素变化缓慢，变化幅度小的区域，低频分量占据主导地位。</p>\n<p><img data-src=\"https://ptpimg.me/00pd27.png\" alt=\"\" /></p>\n<h4 id=\"-3\"><a class=\"anchor\" href=\"#-3\">#</a> </h4>\n<h4 id=\"平面\"><a class=\"anchor\" href=\"#平面\">#</a> 平面</h4>\n<p>平面 (flat areas) 是包含大量低频分量的区域，其特点是像素变化非常小。如上图左侧黄框区域。</p>\n<h4 id=\"-4\"><a class=\"anchor\" href=\"#-4\">#</a> </h4>\n<h4 id=\"线条\"><a class=\"anchor\" href=\"#线条\">#</a> 线条</h4>\n<p>线条 (lines) 是包含极端高频分量的区域，其像素有跳跃式的急剧变化。如上图中间红框区域。</p>\n<h4 id=\"-5\"><a class=\"anchor\" href=\"#-5\">#</a> </h4>\n<h4 id=\"纹理\"><a class=\"anchor\" href=\"#纹理\">#</a> 纹理</h4>\n<p>纹理 (texture) 区域较为复杂，其像素在小范围内频繁变化，高低起伏不断。纹理变化剧烈的，称之为强纹理，中高频成分占据主导，其性质接近于线条。如上图左侧蓝框区域。纹理变化平缓的，称之为弱纹理，中低频率成分占据主导，其性质接近于平面。如上图右侧绿框区域。</p>\n<h4 id=\"-6\"><a class=\"anchor\" href=\"#-6\">#</a> </h4>\n<h4 id=\"噪点\"><a class=\"anchor\" href=\"#噪点\">#</a> 噪点</h4>\n<p>噪点 (noise) 是一类特殊的画面要素，表现为随机的像素涨落，它可以叠加到以上任意要素中。噪点的频率构成取决于其种类，白噪声在各个频率的强度完全一致，而一般动画原盘所带的噪点则涵盖低频到中高频，随频率增高而略有下降，最高频部分则基本被砍掉。</p>\n<h3 id=\"-7\"><a class=\"anchor\" href=\"#-7\">#</a> </h3>\n<h3 id=\"2-时间上的频率划分静态和动态\"><a class=\"anchor\" href=\"#2-时间上的频率划分静态和动态\">#</a> (2). 时间上的频率划分：静态和动态</h3>\n<p>在视频处理中，时间 (temporal) 的概念指的是帧与帧之间的像素变化。</p>\n<p>一段视频如果变化剧烈，其时间复杂度较高，时域上的高频信息占比就较多。而如果视频本身变化缓慢，多为静态，其时间复杂度较低，时域上的低频信息占比就较多。</p>\n<p>一般来说，一段视频的时域高频信息多，动态的信息量就大，所需要记录的数据量就越多，编码所需要的运算量也越大。这就是为什么动态高的部分更容易发生欠码。但是另一方面，人眼对高速变化的场景，敏感度不如静态的图片来的高，因为没有时间去仔细观察细节。所以动态场景的优先度可以低于静态场景，高动态镜头的帧稍微烂一点是可以接受的。如何权衡以上两点去分配码率，是实际编码中需要考虑的重点。</p>\n<h2 id=\"-8\"><a class=\"anchor\" href=\"#-8\">#</a> </h2>\n<h2 id=\"2-画面瑕疵\"><a class=\"anchor\" href=\"#2-画面瑕疵\">#</a> 2. 画面瑕疵</h2>\n<h3 id=\"-9\"><a class=\"anchor\" href=\"#-9\">#</a> </h3>\n<h3 id=\"1-色带-banding-color-banding\"><a class=\"anchor\" href=\"#1-色带-banding-color-banding\">#</a> (1). 色带 (banding /color banding)</h3>\n<p>色带是最常见的瑕疵，没有之一。色带产生的本质原因是量化数据的精度不足。目前绝大部分的片源采用 YUV 8bit  编码，然而在 YUV 模型下 8bit  的数据精度范围，不足以达到人眼可分辨精度的极限，这就导致色彩出现可分辨的断层，即色带。另一方面，早期的大部分制作商并没有考虑如何在有限的精度范围内使用额外的手段避免色带，这就导致了色带泛滥成灾。如今这一现象有所改善，部分制作商已经意识到这一问题，并通过加入噪点和抖动的方式来避免色带。</p>\n<p>色带在暗场平面以及渐变颜色的场景最容易观测到。色带通常表现为一系列波浪状、同心环状的阶梯区域。</p>\n<p>色带的处理方式叫做去色带 (deband /de-banding)。</p>\n<p>注意下图中间的头发平面区域。</p>\n<p><img data-src=\"https://ptpimg.me/o3ff2r.png\" alt=\"\" /></p>\n<h3 id=\"-10\"><a class=\"anchor\" href=\"#-10\">#</a> </h3>\n<h3 id=\"2-锯齿-aliasing\"><a class=\"anchor\" href=\"#2-锯齿-aliasing\">#</a> (2). 锯齿 (aliasing)</h3>\n<p>锯齿是最典型、最常见的线条瑕疵。锯齿表现为原本应该连续的线条上，发生了线条与平面的交替、毛刺、或者断线。锯齿的类型很多，不同类型的锯齿有不同的产生原因。</p>\n<p>锯齿的处理方式叫做抗锯齿 (anti-aliasing /aa)。</p>\n<h4 id=\"-11\"><a class=\"anchor\" href=\"#-11\">#</a> </h4>\n<h4 id=\"二值化锯齿\"><a class=\"anchor\" href=\"#二值化锯齿\">#</a> 二值化锯齿</h4>\n<p>二值化锯齿是动画制作的二值化过程产生的。对于手绘作画的动画，原画首先被扫描得到二值化的数字图片，之后进行润线来平滑线条。如果扫描性能太差或者润线做得不到位，就会留下凹凸不平的线条。</p>\n<p>注意梗小姐右下角的头发。</p>\n<p><img data-src=\"https://ptpimg.me/goa762.png\" alt=\"\" /></p>\n<h4 id=\"-12\"><a class=\"anchor\" href=\"#-12\">#</a> </h4>\n<h4 id=\"缩放锯齿\"><a class=\"anchor\" href=\"#缩放锯齿\">#</a> 缩放锯齿</h4>\n<p>缩放锯齿是图像在后期处理时被低级的算法拉伸或者缩小而产生的细碎锯齿、毛刺现象，是最常见的锯齿瑕疵。</p>\n<p><img data-src=\"https://ptpimg.me/87v8oq.png\" alt=\"\" /></p>\n<h4 id=\"-13\"><a class=\"anchor\" href=\"#-13\">#</a> </h4>\n<h4 id=\"3d-渲染锯齿\"><a class=\"anchor\" href=\"#3d-渲染锯齿\">#</a> 3D 渲染锯齿</h4>\n<p>3D 渲染锯齿一般出现在背景素材上，这些素材由 3D 建模绘制，在渲染时由于算法问题，产生大量锯齿或者断线现象。一般 3D 渲染锯齿的断线过于严重而无法修复。</p>\n<p><img data-src=\"https://ptpimg.me/055vp6.png\" alt=\"\" /></p>\n<p><img data-src=\"https://ptpimg.me/q847ds.png\" alt=\"\" /></p>\n<h4 id=\"-14\"><a class=\"anchor\" href=\"#-14\">#</a> </h4>\n<h4 id=\"像素锯齿\"><a class=\"anchor\" href=\"#像素锯齿\">#</a> 像素锯齿</h4>\n<p>像素锯齿一般出现在纯数字作画的场景中，由于线条和平面的交界处过于锐利，没有中间过渡的部分，而形成类似锯齿的形状。一般来说，像素锯齿被认为是一种画风，而不是需要处理的瑕疵。</p>\n<p><img data-src=\"https://ptpimg.me/21upfu.png\" alt=\"\" /></p>\n<h4 id=\"-15\"><a class=\"anchor\" href=\"#-15\">#</a> </h4>\n<h4 id=\"画风型断线\"><a class=\"anchor\" href=\"#画风型断线\">#</a> 画风型断线</h4>\n<p>画风型断线表现为线条深浅交替，并且往往不太规则。画风型断线是动画制作中刻意处理的美术风格，一般不需要修复。</p>\n<p><img data-src=\"https://ptpimg.me/s8o6e7.png\" alt=\"\" /></p>\n<h3 id=\"-16\"><a class=\"anchor\" href=\"#-16\">#</a> </h3>\n<h3 id=\"3-振铃晕轮-ringing-haloing\"><a class=\"anchor\" href=\"#3-振铃晕轮-ringing-haloing\">#</a> (3). 振铃 / 晕轮 (ringing /haloing)</h3>\n<p>严格来说，振铃和晕轮是有区别的，振铃的成因是信号的高频成分被破坏（比如有损压缩中在变换域后的量化），而晕轮是来自锐化产生的极端值。但它们在目视结果上都表现为，在图像的主要线条附近，有一圈瑕疵像素的值与周围像素不同，且更接近值域两端的极值。两者可以用相近的手段进行处理，我们一般不刻意区分两者。</p>\n<p>振铃 / 晕轮的处理方式叫做去振铃 / 晕轮 (dering /de-ringing, dehalo /de-haloing)。</p>\n<p>振铃 / 晕轮通常和锯齿是伴生的，这在后期拉伸的片源中尤其常见。</p>\n<p><img data-src=\"https://ptpimg.me/n0clu6.png\" alt=\"\" /></p>\n<h3 id=\"-17\"><a class=\"anchor\" href=\"#-17\">#</a> </h3>\n<h3 id=\"4-噪点-noise-grain\"><a class=\"anchor\" href=\"#4-噪点-noise-grain\">#</a> (4). 噪点 (noise /grain)</h3>\n<p>亮度平面的噪点表现为深浅不一的点状图样，而色度平面的噪点则表现为花花绿绿的斑点。</p>\n<p>噪点是否是一种瑕疵，这一话题的争吵多年来从未停止。除去特效噪点，就普通数字噪点而言，我们认为可以分为两部分，画风型噪点和保护型噪点。</p>\n<p>画风型噪点以静噪居多，往往与纹理细节紧密结合，是图像画风的一部分。</p>\n<p>保护型噪点在正常图像比例下几乎不可见，它们主要用于防止产生色带。</p>\n<p>在 10bit 压制下，对于保护型噪点的需求有所降低，可以削去一部分来降低码率。而画风型噪点是组成画面的重要部分，很大程度影响着最终的还原度，需要尽量保留。</p>\n<p>另外视觉心理学优化也应当纳入考量。对于人眼来说，亮场区域的噪点几乎不可见，可以尽量削去。色度噪点对画风的影响基本是恼人的，应该尽可能去掉。</p>\n<p><img data-src=\"https://ptpimg.me/0o4n9c.png\" alt=\"\" /></p>\n<h3 id=\"-18\"><a class=\"anchor\" href=\"#-18\">#</a> </h3>\n<h3 id=\"5-色块-blocking\"><a class=\"anchor\" href=\"#5-色块-blocking\">#</a> (5). 色块 (blocking)</h3>\n<p>色块一般是严重欠码或者视频损坏，而导致的一系列方形、网格形的图样。色块在三次元演唱会、各种 web 片源中极其常见。</p>\n<p>色块的处理方式叫做去色块 (deblock /de-blocking)。</p>\n<p><img data-src=\"https://ptpimg.me/nno80s.png\" alt=\"\" /></p>\n<h3 id=\"-19\"><a class=\"anchor\" href=\"#-19\">#</a> </h3>\n<h3 id=\"6-烂边蚊噪-dct-ringing-dct-noise\"><a class=\"anchor\" href=\"#6-烂边蚊噪-dct-ringing-dct-noise\">#</a> (6). 烂边 / 蚊噪 (DCT ringing / DCT noise)</h3>\n<p>烂边 / 蚊噪是指画面欠码的时候，线条和平面都出现了很脏的观感。线条周围一圈出现振铃、锯齿、块状噪点等混合瑕疵，而平面有噪点的地方，部分噪点被去掉，部分噪点残留，形成难看的纹路，并通常伴有色块出现。</p>\n<p>这些瑕疵是由视频编码中的 DCT (Discrete Cosine Transform，离散余弦变换) 导致。在码率严重不足的时候，将一些频率一刀切，就会造成这样的后果。</p>\n<p>烂边 / 蚊噪的处理一般需要 deband /deblock/denoise 等多种手段的配合。</p>\n<p><img data-src=\"https://ptpimg.me/2m1yq4.png\" alt=\"\" /></p>\n<h3 id=\"-20\"><a class=\"anchor\" href=\"#-20\">#</a> </h3>\n<h3 id=\"7-亮度越界-luma-overflow-underflow\"><a class=\"anchor\" href=\"#7-亮度越界-luma-overflow-underflow\">#</a> (7). 亮度越界 (luma overflow /underflow)</h3>\n<p>数字图像中的数据在不同标准下有着不同的取值范围，如果把一个标准的范围用到另一个标准下，就可能会发生越界的问题。</p>\n<p>下图中亮度的上界发生了溢出，超过的部分被认为是全白而无法分辨细节。</p>\n<p><img data-src=\"https://ptpimg.me/9gq7ft.png\" alt=\"\" /></p>\n<p>注意画面的左上角，修正亮度范围后，终于可以看清其中的纹理细节。</p>\n<p><img data-src=\"https://ptpimg.me/4u21r0.png\" alt=\"\" /></p>\n<p>越界的调整需要对数字图像规范有着专业的了解，同时还得熟知中间的变换公式。</p>\n<p>除了亮度，色度同样可能发生越界，不过一般来讲色度越界的情况非常少见。</p>\n<p>下面部分介绍一些与交错 (interlace) 相关的瑕疵。</p>\n<h3 id=\"-21\"><a class=\"anchor\" href=\"#-21\">#</a> </h3>\n<h3 id=\"8-拉丝横纹-combing\"><a class=\"anchor\" href=\"#8-拉丝横纹-combing\">#</a> (8). 拉丝 / 横纹 (combing)</h3>\n<p>拉丝 / 横纹是指图像中相邻两行错位造成的视觉效果。当隔行扫描的交错（interlaced）片源，没有经过任何处理（或者部分片段漏了处理），然后按照逐行扫描（progressive）的方式进行播放，就会产生这样的现象。</p>\n<p>根据片源类型的不同，处理方式一般有以下几类：</p>\n<p>反交错（de-interlacing）/ 场匹配（field-matching）/ 反交卷过带（inverse telecine，IVTC）</p>\n<p><img data-src=\"https://ptpimg.me/z85xe4.png\" alt=\"\" /></p>\n<h3 id=\"-22\"><a class=\"anchor\" href=\"#-22\">#</a> </h3>\n<h3 id=\"9-缟缟\"><a class=\"anchor\" href=\"#9-缟缟\">#</a> (9). 缟缟</h3>\n<p>此名称有一定争议，不过在我们的教程中，该词指的就是如下的现象。</p>\n<p>缟缟的效果兼具拉丝和锯齿的效果，有非常特殊的线条特征。</p>\n<p>缟缟产生的原因是，隔行扫描的源，没有先转换为逐行扫描，而是在隔行状态下，用逐行扫描的算法放大。</p>\n<p>缟缟按照具体表现及程度有不同的处理方法，统称去缟缟。</p>\n<p><img data-src=\"https://ptpimg.me/b9e9h1.png\" alt=\"\" />###</p>\n<h3 id=\"10-重复场-duplicate-field\"><a class=\"anchor\" href=\"#10-重复场-duplicate-field\">#</a> (10). 重复场 (duplicate field)</h3>\n<p>重复场表现为一帧里，奇数行和偶数行相同。视觉效果如下（轻音少女横滨演唱会；少数动画中也有，如 K 的剧场版）。</p>\n<p>重复场通常和锯齿难以区分，但是如果把奇数行和偶数行拆开各自组成一幅图，两份图是一样的。</p>\n<p>解决方法是丢掉奇数行或者偶数行，用剩下的缩放到原来高度。处理方式记为 fix duplicate field。</p>\n<p><img data-src=\"https://ptpimg.me/76679w.png\" alt=\"\" /></p>\n<h3 id=\"-23\"><a class=\"anchor\" href=\"#-23\">#</a> </h3>\n<h3 id=\"11-鬼影-blending-ghosting\"><a class=\"anchor\" href=\"#11-鬼影-blending-ghosting\">#</a> (11). 鬼影 (blending /ghosting)</h3>\n<p>除去视频本身采用的特效，这里鬼影指的是非正常的帧融合，造成的动态瑕疵，典型的比如孔明的部分镜头、寒蝉的 BD。</p>\n<p>blending 一般是不规范的反交错 / 交卷过带产生，且 / 或者是滥用不可靠的时域处理造成的。</p>\n<p>多数情况下无解，少数有规律可循的，一定手段可以还原。</p>\n<p>处理方式称为 de-blending /ghost-removal。</p>\n<p><img data-src=\"https://ptpimg.me/22v5pt.png\" alt=\"\" /></p>\n<p>下面部分介绍一些与色度平面相关的瑕疵，其中绝大部分的问题是由万恶的色度下采样所致。 实际上它们与亮度平面的问题没有本质区别，但由于色度平面和亮度平面的性质差异，最终在图像中的表现形式有所区别，因此拿出来单独介绍。</p>\n<h3 id=\"-24\"><a class=\"anchor\" href=\"#-24\">#</a> </h3>\n<h3 id=\"12-色度色带-chroma-banding\"><a class=\"anchor\" href=\"#12-色度色带-chroma-banding\">#</a> (12). 色度色带 (chroma banding)</h3>\n<p>色度色带，就是色度平面精度不足而产生的色彩断层。通常在出现亮度平面色带的地方，或多或少也会出现色度色带的问题。</p>\n<p>色度色带在目视表现上，跟一般的色带略有区别，主要表现为本该是一种颜色的区域变为多种颜色区域的混合。</p>\n<p>色度色带一般随着正常色带一起处理，无非加重 UV 平面的处理力度。</p>\n<p>注意下图左侧墙壁平面，以及中间人物衣服的平面区域。</p>\n<p><img data-src=\"https://ptpimg.me/l1h92v.png\" alt=\"\" />###</p>\n<h3 id=\"13-色度锯齿-chroma-aliasing\"><a class=\"anchor\" href=\"#13-色度锯齿-chroma-aliasing\">#</a> (13). 色度锯齿 (chroma aliasing)</h3>\n<p>色度锯齿通常是由于色度平面在下采样时使用了劣质的算法，导致出现明显锯齿。</p>\n<p>色度锯齿在颜色极红或者极蓝处最为明显，表现为线条被平面的颜色入侵，产生不规则的断线状。</p>\n<p>色度锯齿的处理方式一般是拆分 UV 平面进行抗锯齿 (chroma aa)。</p>\n<p>注意图中红色区域的线条。</p>\n<p><img data-src=\"https://ptpimg.me/yyp6zg.png\" alt=\"\" /></p>\n<h3 id=\"-25\"><a class=\"anchor\" href=\"#-25\">#</a> </h3>\n<h3 id=\"14-色度偏移-chroma-shift\"><a class=\"anchor\" href=\"#14-色度偏移-chroma-shift\">#</a> (14). 色度偏移 (chroma shift)</h3>\n<p>色度偏移，指的是色度平面相对亮度平面的错位。其目视效果通常是，在极红、极蓝等（UV 值极大或极小）平面与线条的交界处，多了一些重影。或者说线条一侧的颜色侵入到另一侧。</p>\n<p>色度偏移通常是由于不正确的 chroma placement (chroma 平面相对 luma 平面的偏移) 处理而导致的。实际中色度偏移通常只有 0.5 个像素，最多 1 个像素，效果非常不明显，一般人很难观察到。</p>\n<p>色度偏移的处理方式叫做 fix chroma shift。</p>\n<p>下图为手动制作的向左偏移 3 个像素的例子，注意图中头发线条部分，颜色发生了严重的错位。</p>\n<p><img data-src=\"https://ptpimg.me/96vs3m.png\" alt=\"\" /></p>\n<p>然而实际中一般只有 0.5 个像素左右的偏移，注意下图袖子左右的线条。</p>\n<p><img data-src=\"https://ptpimg.me/h2092y.png\" alt=\"\" /></p>\n<h4 id=\"-26\"><a class=\"anchor\" href=\"#-26\">#</a> </h4>\n<h4 id=\"rgb-shift\"><a class=\"anchor\" href=\"#rgb-shift\">#</a> RGB shift</h4>\n<p>实践中常常有人将 RGB shift 错认为 chroma shift。RGB shift 是在 RGB 空间下，将 R 和 B 平面进行一定偏移处理，主要是为了模拟现实中光线散射的效果。</p>\n<p>由于 RGB 各平面间不存在类似 YUV 那样的偏移，因此 RGB shift 几乎一定是故意制作的特效，并不是一种瑕疵。</p>\n<p>区分 RGB shift 与 chroma shift 最好的方式，一是看是否是单侧偏移，chroma shift  只可能是单侧偏移；二是看白色平面上的黑色线条，由于白色和黑色在 YUV 下的 UV 相同，其分界面不可能产生 chroma  shift，只可能产生 RGB shift。</p>\n<p><img data-src=\"https://ptpimg.me/n71lvf.png\" alt=\"\" /></p>\n<h3 id=\"-27\"><a class=\"anchor\" href=\"#-27\">#</a> </h3>\n<h3 id=\"15-色度溢出-chroma-bleeding\"><a class=\"anchor\" href=\"#15-色度溢出-chroma-bleeding\">#</a> (15). 色度溢出 (chroma bleeding)</h3>\n<p>色度溢出跟色度偏移很像，区别在于色度偏移是有方向的偏移，色度溢出是无方向的扩张。</p>\n<p>色度溢出在颜色强烈的线条出容易观察到，特点是 chroma 平面的线条宽度远大于 luma 平面线条宽度，导致侵蚀了周围的颜色。</p>\n<p>色度溢出的处理方式一般是对 chroma 平面进行收线，将线条控制到与 luma 平面相同，记作 fix chroma bleeding。</p>\n<p>色度溢出的范围一般较小，不易观察，下图实际为特效。</p>\n<p><img data-src=\"https://ptpimg.me/bb9b15.png\" alt=\"\" /></p>\n<p>最后介绍一些在上古动画中会出现，但如今基本见不到的瑕疵。</p>\n<h3 id=\"-28\"><a class=\"anchor\" href=\"#-28\">#</a> </h3>\n<h3 id=\"16-晃动-global-motion-pan\"><a class=\"anchor\" href=\"#16-晃动-global-motion-pan\">#</a> (16). 晃动 (global motion /pan)</h3>\n<p>通常是在老片翻新过程中，因为镜头 / 胶带位置不固定，导致录制的视频，似乎镜头在不断晃动一样。哪怕是应该静止的场景，都有不规律的、小幅晃动。</p>\n<p>修复手段一般称为 depan。</p>\n<h3 id=\"-29\"><a class=\"anchor\" href=\"#-29\">#</a> </h3>\n<h3 id=\"17-彩虹-rainbow\"><a class=\"anchor\" href=\"#17-彩虹-rainbow\">#</a> (17). 彩虹 (rainbow)</h3>\n<p>rainbow 多出现在早期真人视频中，表现为亮度快速变化的地方，UV 似乎像彩虹一般红蓝交织。</p>\n<p>rainbow 的产生是由于 YUV 数据在电磁信号传输过程中，高频的 Y 信号，因为传输介质不理想，影响到了 UV。如果这时候进行进一步转录，就会把这个问题保留。</p>\n<p>修复手段一般称为 de-rainbow。</p>\n<p><img data-src=\"https://ptpimg.me/ocps6d.png\" alt=\"\" /></p>\n<h3 id=\"-30\"><a class=\"anchor\" href=\"#-30\">#</a> </h3>\n<h3 id=\"18-点状斑纹-dot-crawl\"><a class=\"anchor\" href=\"#18-点状斑纹-dot-crawl\">#</a> (18). 点状斑纹 (dot-crawl)</h3>\n<p>点状斑纹也是传输 YUV 中，不正确处理导致的问题。</p>\n<p>修复手段一般称为 dot-crawl removal。</p>\n<p><img data-src=\"https://ptpimg.me/g3jmr9.jpg\" alt=\"\" /></p>\n",
            "tags": [
                "压制技术"
            ]
        },
        {
            "id": "https://sakurame.eu.org/2023/06/11/vcbstudio/%E7%A5%9E%E4%B8%80%E6%A0%B7%E7%9A%84%E5%B7%A5%E5%85%B7%E4%BB%AC/",
            "url": "https://sakurame.eu.org/2023/06/11/vcbstudio/%E7%A5%9E%E4%B8%80%E6%A0%B7%E7%9A%84%E5%B7%A5%E5%85%B7%E4%BB%AC/",
            "title": "神一样的工具们",
            "date_published": "2023-06-11T02:58:17.000Z",
            "content_html": "<h1 id=\"第三章-神一样的工具们\"><a class=\"anchor\" href=\"#第三章-神一样的工具们\">#</a> 第三章 神一样的工具们</h1>\n<p>BDRip 的制作流程，大致上可以概括为：抽流 - 压制 -  封装。在本章节，我们便循着这一流程，展示各个环节所需要的工具，并详细介绍它们的用法。希望通过这一章节的内容，让大家在宏观上理解一个蓝光原盘从着手制作到封装为成品的全部过程，对 BDRip 的制作能有一个全面整体的认识。</p>\n<h2 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h2>\n<h2 id=\"前期准备\"><a class=\"anchor\" href=\"#前期准备\">#</a> 前期准备</h2>\n<p>本章节用到的工具众多，就不在这里一一展示，放到具体小节再详细介绍。你可以先通篇浏览，将需要用到的工具提前下载安装好。</p>\n<p>目前绝大部分的工具都有带图形界面的 Gui 版本，使用上基本不存在障碍。不过我们仍然会介绍其命令行程序的使用方法，因为有时命令行程序更加方便，可以满足一些特殊的需求，并且对于批量处理更加简单高效。如果你还不熟悉命令行的打开方式，赶紧上网百度一下吧。</p>\n<p>我们推荐下载 VCB-Studio 的压制生产力工具 OKEGui，你可以在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0FtdXNlbWVudENsdWIvdG9vbHMvcmVsZWFzZXM=\">这里</span>下载到已经打包好的版本，解压即用。我们暂时不会介绍 OKEGui 的使用方法，因为它比较复杂，只有熟练掌握压制流程之后才能更好地理解其用法。在 OKEGui\\tools 中集成了许多实用的命令行工具，基本能够满足本章教程的大部分需求。</p>\n<p>我们推荐将所有工具放到一个文件夹下，然后将该文件夹加入到环境变量中，这样可以在命令行中快速调用。你可以在附录中查看设置环境变量的方法。</p>\n<h2 id=\"-2\"><a class=\"anchor\" href=\"#-2\">#</a> </h2>\n<h2 id=\"抽流\"><a class=\"anchor\" href=\"#抽流\">#</a> 抽流</h2>\n<p>抽流，就是把媒体文件中的视频、音频、字幕、章节等分别提取出来，成为单独的文件，便于之后进行压制等处理。</p>\n<h3 id=\"-3\"><a class=\"anchor\" href=\"#-3\">#</a> </h3>\n<h3 id=\"1-bd的抽流\"><a class=\"anchor\" href=\"#1-bd的抽流\">#</a> (1). BD 的抽流</h3>\n<p>上一章我们讲了 BD 的结构，视频、音频、字幕位于 m2ts 文件中，而章节单独存放在 mpls 文件中。m2ts 的抽流通常使用 eac3to，这是一个由 madshi 编写的命令行小工具，没错就是那个 madVR 的开发者 madshi。</p>\n<p>eac3to 有一个方便的 GUI，叫做 HD DVD/Blu-Ray Stream Extractor，它作为一个工具集成在 MeGUI 中。你可以在这里下载 MeGUI：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb3VyY2Vmb3JnZS5uZXQvcHJvamVjdHMvbWVndWkvJUUzJTgwJTgy\">https://sourceforge.net/projects/megui/。</span></p>\n<p>打开 MeGUI，上方菜单选择 【Tools】-【HD Stream Extractor】。</p>\n<p>注意这个 Settings，其实是个按钮，需要勾选上 show encoding option (s)。</p>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B03%5D%20%E7%A5%9E%E4%B8%80%E6%A0%B7%E7%9A%84%E5%B7%A5%E5%85%B7%E4%BB%AC/media/image06.png\" alt=\"img\" /></p>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B03%5D%20%E7%A5%9E%E4%B8%80%E6%A0%B7%E7%9A%84%E5%B7%A5%E5%85%B7%E4%BB%AC/media/image07.png\" alt=\"img\" /></p>\n<p>在输入部分选择 m2ts，就可以看到能够抽取的轨道。</p>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B03%5D%20%E7%A5%9E%E4%B8%80%E6%A0%B7%E7%9A%84%E5%B7%A5%E5%85%B7%E4%BB%AC/media/image08.png\" alt=\"img\" /></p>\n<h4 id=\"-4\"><a class=\"anchor\" href=\"#-4\">#</a> </h4>\n<h4 id=\"视频轨的抽取\"><a class=\"anchor\" href=\"#视频轨的抽取\">#</a> 视频轨的抽取</h4>\n<p>在 Extract As 处可以选择输出格式，视频轨可以抽取为 mkv 或者裸视频流 h264，一般抽取为 h264 即可。实际上，一般我们不需要提取视频轨，因为大多数工具可以直接从 m2ts 文件中获取视频。</p>\n<h4 id=\"-5\"><a class=\"anchor\" href=\"#-5\">#</a> </h4>\n<h4 id=\"音轨的抽取\"><a class=\"anchor\" href=\"#音轨的抽取\">#</a> 音轨的抽取</h4>\n<p>原盘的音轨有 PCM / TrueHD / DTS-HD MA 等无损格式，也有 AC3 / DTS 等有损格式。按照 VCB-Studio 规范，对于无损音轨，提取为 flac 格式；对于有损音轨，提取为原本格式。</p>\n<p>需要注意一点，TrueHD / DTS-HD MA 音轨往往存在一个内嵌的 AC3 / DTS core  有损音轨，这是为了给不兼容 TrueHD / DTS-HD MA 的设备提供向下兼容。这导致很多时候 MediaInfo  只认出一条音轨，而播放器会认出两条。对于这种情况，直接丢弃有损部分即可。</p>\n<h4 id=\"-6\"><a class=\"anchor\" href=\"#-6\">#</a> </h4>\n<h4 id=\"字幕的抽取\"><a class=\"anchor\" href=\"#字幕的抽取\">#</a> 字幕的抽取</h4>\n<p>原盘有时会有 PGS 图形字幕，抽取为 sup 即可。</p>\n<p>需要注意的是，不能使用 ffmpeg 进行抽流。因为 eac3to 会做一些额外的，但是非常有用的检查。</p>\n<p>比如它会检查音轨的真正 bitdepth。有些原盘标注的是 24bit PCM，但是实际的有效精度只有 16bit。这时 eac3to 会抽取为 16bit。</p>\n<p>还比如有些原盘的音轨有延迟（delay），但是部分播放器对 delay 的支持不是很好，为了避免播放出现问题，VCB-Studio 规范要求消去 delay。eac3to 会自动检查 delay，并重新调整为无 delay。</p>\n<h4 id=\"-7\"><a class=\"anchor\" href=\"#-7\">#</a> </h4>\n<h4 id=\"eac3to的命令行操作\"><a class=\"anchor\" href=\"#eac3to的命令行操作\">#</a> eac3to 的命令行操作</h4>\n<p>最后补充一下 eac3to 的命令行用法，命令行会有一些更灵活的用法。</p>\n<p>可以使用这个命令查看 m2ts 的各轨道信息。</p>\n<pre><code>eac3to &quot;path\\\\to\\\\m2ts&quot; -progressnumbers\n</code></pre>\n<p>​</p>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B03%5D%20%E7%A5%9E%E4%B8%80%E6%A0%B7%E7%9A%84%E5%B7%A5%E5%85%B7%E4%BB%AC/media/image09.png\" alt=\"img\" /></p>\n<p>如果你的 m2ts 保持了原盘目录结构，eac3to 还可以检测到其章节，不过有时即使保持原盘目录也会检测失败。</p>\n<p>当我们确定好需要抽取的轨道后，就可以使用以下命令抽取相应轨道。</p>\n<pre><code>eac3to &quot;path\\\\to\\\\m2ts&quot; id: &quot;path\\\\to\\\\outputfile.format&quot;\n</code></pre>\n<p>​</p>\n<p>其中 id 是要抽取的轨道的编号，后面指定输出文件路径和名称，文件后缀名非常重要，它指定输出格式，不过 eac3to 只支持某些后缀，写错会显示 not supported。</p>\n<p>以上面图片中的 m2ts 为例，抽取视频轨。注意不能写 .avc，会报错。</p>\n<pre><code>eac3to 00000.m2ts 1: 00000.h264\n</code></pre>\n<p>​</p>\n<p>抽取音轨，可以直接抽取为 flac，也可以抽取为 wav。</p>\n<pre><code>eac3to 00000.m2ts 2: 00000.flac\n</code></pre>\n<p>​</p>\n<p>对于 TrueHD / DTS-HD MA 音轨且带有有损 core 时，可以通过如下命令抽取无损部分。</p>\n<pre><code>eac3to 00000.m2ts 2: 00000.thd\n\neac3to 00000.m2ts 2: 00000.dtsma\n</code></pre>\n<p>​</p>\n<p>而有损部分可以通过  <code>-core</code>  参数抽取。</p>\n<pre><code>eac3to 00000.m2ts 2: 00000.ac3 -core\n\neac3to 00000.m2ts 2: 00000.dts -core\n</code></pre>\n<p>​</p>\n<p>抽取字幕，注意 PGS 字幕的后缀为 sup。</p>\n<pre><code>eac3to 00000.m2ts 3: 00000.sup\n</code></pre>\n<p>​</p>\n<p>除了抽取单个 m2ts 的简单用法，eac3to 命令行还有一些高级用法，在后面的小节会进一步介绍。</p>\n<h3 id=\"-8\"><a class=\"anchor\" href=\"#-8\">#</a> </h3>\n<h3 id=\"2-章节的提取\"><a class=\"anchor\" href=\"#2-章节的提取\">#</a> (2). 章节的提取</h3>\n<p>eac3to 虽然可以从 m2ts 检测并抽取章节，但是存在一些问题。我们更推荐使用 ChapterTool 来从 mpls 提取章节。ChapterTool 是 TautCony（本组第二代队长，人称 TC）写的一个小工具。 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RhdXRjb255L0NoYXB0ZXJUb29s\">https://github.com/tautcony/ChapterTool</span></p>\n<p>打开 ChapterTool，把 mpls 拖进去可以看到。</p>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B03%5D%20%E7%A5%9E%E4%B8%80%E6%A0%B7%E7%9A%84%E5%B7%A5%E5%85%B7%E4%BB%AC/media/image10.png\" alt=\"img\" /></p>\n<p>注意右上角红框中的信息，它告诉了这个章节对应的 m2ts 编号和章节数量。看到这里你应该明白，m2ts 的编号和 mpls 的编号并没有任何联系。对于含有多个 m2ts 的 mpls，每个 m2ts 都有独立的章节，可以在这里的下拉框进行切换。</p>\n<p>ChapterTool 提供了很多信息，比如说章节的数量、各个章节的时间戳、章节名、帧号。可以看出，这里的帧号是 0-indexed。帧号的计算方法，需要大家掌握。</p>\n<pre><code>对于恒定帧率的视频，帧号 = round(帧率 * 时间戳)\n</code></pre>\n<p>​</p>\n<p>比如这里的 chapter 03，时间戳是  02:31.026，帧率在右上角可以看到，为 24000/1001，那么帧号 = round ((24000 / 1001) * (2 * 60 + 31.026) ) = round (3621.002997) = 3621</p>\n<p>由于时间戳精度的问题，一般计算出来是个小数，但是会非常接近某个整数。如果你计算出比如在 x.5 附近，那你就要思考一下是不是算错了。</p>\n<p>ChapterTool 给我们的其实是取整后的结果，不勾选右上角的帧数取整就可以看到计算的原始结果。</p>\n<p>ChapterTool 也提供了章节的编辑功能，章节名、时间戳、帧号都是可以直接编辑的，另外也有删除增加章节的功能。偷偷提示，在按钮上右键可以看到一些隐藏功能。</p>\n<p>按照 VCB-Studio 规范，</p>\n<ul>\n<li>如果最后一个章节的时间戳是视频结束，或者离视频结束差一两秒的黑屏，需要删除该章节</li>\n<li>第一个章节的时间戳必须是 00:00:00.000</li>\n<li>如果只有开头的章节，那么该视频不需要附带章节</li>\n<li>章节名可以是从 01 开始按顺序排列的 Chapter xx，也可以填写原盘中的章节名。</li>\n</ul>\n<p>确认章节没有问题后，点击保存，生成用于封装的 txt 格式章节。</p>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B03%5D%20%E7%A5%9E%E4%B8%80%E6%A0%B7%E7%9A%84%E5%B7%A5%E5%85%B7%E4%BB%AC/media/image11.png\" alt=\"img\" /></p>\n<p>在保存之前可以通过右上角的 P 按钮，预览将要生成的章节。</p>\n<p>ChapterTool 的功能远不止以上这些，大家可以阅读 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RhdXRjb255L0NoYXB0ZXJUb29sL3dpa2k=\">Wiki</span> 了解更多，后面的教程还会多次提到 ChapterTool。</p>\n<h3 id=\"-9\"><a class=\"anchor\" href=\"#-9\">#</a> </h3>\n<h3 id=\"3-菜单按钮的提取\"><a class=\"anchor\" href=\"#3-菜单按钮的提取\">#</a> (3). 菜单按钮的提取</h3>\n<p>还记得之前那些无法播放的 m2ts 吗，我们当时说它们是菜单的按钮或者动画，这里就来教大家如何提取这些内容。</p>\n<p>我们使用的是这个工具：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1NBUGlrYWNodS9pZ3N0b29scyVFMyU4MCU4Mg==\">https://github.com/SAPikachu/igstools。</span></p>\n<p>这个工具依赖于 python，安装稍微有点麻烦。需要注意的是，它的 readme 很久没更新了，落后于实际功能。</p>\n<p>这里以 portable 版 python 为例，介绍如何安装并使用 igstools，对于安装版的 python  也是类似的。如果你已经下载了本章开头提到的工具包，请找到 OKEGui\\tools\\vapoursynth\\python.exe  的路径；如果你还没有下载工具包，还等什么，赶紧回到本章开头去下载吧。</p>\n<p>通过以下命令安装 igstools：</p>\n<pre><code>&quot;path\\\\to\\\\python.exe&quot; -m pip install pypng\n\n&quot;path\\\\to\\\\python.exe&quot; -m pip install https://github.com/SAPikachu/igstools/archive/master.zip\n</code></pre>\n<p>​</p>\n<p>安装好以后，通过以下命令拆包 m2ts：</p>\n<pre><code>&quot;path\\\\to\\\\python.exe&quot; -m igstools &quot;path\\\\to\\\\xxxxx.m2ts&quot;\n</code></pre>\n<p>​</p>\n<p>拆包成功的话，会在 m2ts 目录下看到一堆 png 图片。通过这些图片可以获取到原盘菜单播放时的一些信息，比如有哪些特典、正片的章节名等等。这样你可以了解原盘的内容，不至于遗漏一些特典，以及可以根据章节名补充完整章节信息。</p>\n<p>一些压制组比如 ANK-Raws 会选择将拆包出的图片打包作为特典附带。而按照 VCB-Studio 规范，菜单按钮的处理完全属于可选内容，直接忽略不管也没有问题。</p>\n<p>原盘中的 Menu 以及其按钮一般有两种情况，Menu 中有文字，按钮提供文字特效、动画效果、以及额外的弹出文字窗口；Menu 中只有背景，其他内容全在按钮中。对于第一种情况，我们建议直接忽略按钮；对于第二种情况，可以选择性地处理。</p>\n<p>如果是一图式的 Menu，可以打开 PS，将按钮直接覆盖到 Menu 上。这个处理不算复杂，提取出的按钮都是与 Menu 分辨率相同的带透明度的图片，PS 里直接覆盖即可。少女歌剧小动画的 Menu 就采用了这种处理。</p>\n<p>如果是动态 Menu，将按钮制作为 PGS 字幕，在播放时切换字幕轨道来展示动画效果。超炮 S3 的 Menu 就采用了这种处理。总监 Akarin 制作了一个方便的工具来制作 PGS 字幕，用法会在后续教程中介绍。</p>\n<p>最后再次强调一遍，菜单按钮完全是可选内容，实际上非常不推荐在这上面花费时间，本节教程的目的是教会大家提取按钮，方便了解原盘视频内容。</p>\n<h3 id=\"-10\"><a class=\"anchor\" href=\"#-10\">#</a> </h3>\n<h3 id=\"4-mkv的抽流\"><a class=\"anchor\" href=\"#4-mkv的抽流\">#</a> (4). mkv 的抽流</h3>\n<p>首先下载安装唯一指定 mkv 处理工具，MKVToolNix。你可以在这里下载最新版：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ta3Z0b29sbml4LmRvd25sb2FkL2Rvd25sb2Fkcy5odG1sI3dpbmRvd3MlRTMlODAlODIlRTUlQTYlODIlRTYlOUUlOUMlRTQlQkQlQTAlRTUlQjclQjIlRTclQkIlOEYlRTglQTMlODUlRTUlQTUlQkQ=\">https://mkvtoolnix.download/downloads.html#windows。如果你已经装好</span> OKEGui，也可以直接使用 tools 中的稳定版 MKVToolNix。</p>\n<p>mkvtoolnix-gui.exe 提供了图形界面的 mkv 处理程序，但是没有包含抽流工具 mkvextract.exe 的功能。因此这里推荐使用第三方的辅助 gui 程序，你可以在这里下载：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb3VyY2Vmb3JnZS5uZXQvcHJvamVjdHMvZ21rdmV4dHJhY3RndWkvJUUzJTgwJTgy\">https://sourceforge.net/projects/gmkvextractgui/。</span></p>\n<p>如果你使用的是安装版 MKVToolNix，你可以把 gMKVExtractGUI  解压到任何地方，它会根据注册表找到 MKVToolNix 的位置。如果你使用的是 portable 版 MKVToolNix，那么需要解压到  MKVToolNix 根目录下。</p>\n<p>打开 gMKVExtractGUI，把 mkv 拖进去。</p>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B03%5D%20%E7%A5%9E%E4%B8%80%E6%A0%B7%E7%9A%84%E5%B7%A5%E5%85%B7%E4%BB%AC/media/image12.png\" alt=\"img\" /></p>\n<p>gMKVExtractGUI 也支持批量拖入 mkv，拖入之后依次选择要抽取的轨道即可。</p>\n<p>另外，mkv 的视频和音轨也可以用 eac3to 抽取，但是 PGS 字幕不要用 eac3to 抽。</p>\n<p>一般 mkv 中的 PGS 字幕是经过 zlib 压缩过的，而 eac3to 并不会解压，而是直接提取出来塞到 sup 文件里，这样提取出的 sup 文件无法正常播放。</p>\n<p>处理方法有很多，手动解压再封装，或者封装时指定不做压缩。但是最好的方法还是，mkv 里的 PGS 字幕就老老实实用 mkvextract 抽。</p>\n<h3 id=\"-11\"><a class=\"anchor\" href=\"#-11\">#</a> </h3>\n<h3 id=\"5-mp4的抽流\"><a class=\"anchor\" href=\"#5-mp4的抽流\">#</a> (5). mp4 的抽流</h3>\n<ul>\n<li>把 mp4 丢到 MKVToolNix 里</li>\n<li>转成 mkv</li>\n<li>抽 mkv</li>\n</ul>\n<p>不开玩笑，mp4 的抽流没有什么特别好的办法。</p>\n<h2 id=\"-12\"><a class=\"anchor\" href=\"#-12\">#</a> </h2>\n<h2 id=\"2-压制\"><a class=\"anchor\" href=\"#2-压制\">#</a> 2. 压制</h2>\n<p>在抽取完需要的各轨道之后，就需要对视频和音频进行压制，或者更准确一点，编码（encode）。</p>\n<h3 id=\"-13\"><a class=\"anchor\" href=\"#-13\">#</a> </h3>\n<h3 id=\"1-视频的压制\"><a class=\"anchor\" href=\"#1-视频的压制\">#</a> (1). 视频的压制</h3>\n<p>视频，一般都是要经过有损压制。压制过程可以分为预处理（pre-process）和重编码（encode）。</p>\n<p>预处理就是通过 VapourSynth 或者 AviSynth 读取视频，对画面进行各种处理；重编码则是将处理过后的视频画面进行编码、压缩，以将视频体积减小到合适范围。</p>\n<p>以 VapourSynth 为例，整个压制过程靠 VapourSynth 的 vspipe，结合 x265 或者 x264 编码器，通过管道（pipe）连接来完成。</p>\n<pre><code>vspipe.exe --y4m &quot;xxx.vpy&quot; - | x265.exe --y4m -D 10 --output &quot;xxx.hevc&quot; -\n\nvspipe.exe --y4m &quot;xxx.vpy&quot; - | x264.exe --demuxer y4m --output-depth 10 --output &quot;xxx.h264&quot; -\n</code></pre>\n<p>​</p>\n<p>y4m 是 YUV4MPEG2 的简称，是一种无压缩的视频格式，它自带了分辨率、帧率、像素格式等有效信息。</p>\n<p>x265 编码器，用  <code>--y4m</code>  表示接收格式为 y4m，-D 10 开启 10bit 压制， <code>--output</code>  指定输出文件名。</p>\n<p>x264 编码器，用  <code>--demuxer y4m</code>  表示接收格式为 y4m， <code>--output-depth 10</code>  表示输出 10bit， <code>--output</code>  指定输出文件名。</p>\n<p>x265 编码器可以从这里获取编译好的：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0FtdXNlbWVudENsdWIveDI2NS9yZWxlYXNlcyVFMyU4MCU4Mg==\">https://github.com/AmusementClub/x265/releases。</span></p>\n<p>这个是基于 Yuuki 版，再经过娱乐部优化的版本。</p>\n<p>x264 基本上没得选，基本只能 tmod：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2pwc2RyL3gyNjQvcmVsZWFzZXMlRTMlODAlODI=\">https://github.com/jpsdr/x264/releases。</span></p>\n<p>当然如果你装了 OKEGui，也可以直接使用里面的 x265 和 x264。</p>\n<p>你可能会比较困惑，vpy 脚本以及编码器参数该如何编写，不用着急，后续教程的绝大部分章节都将详细讲述这两方面内容。现在你只需要对这个流程有一个大致了解即可。</p>\n<h3 id=\"-14\"><a class=\"anchor\" href=\"#-14\">#</a> </h3>\n<h3 id=\"2-音频的压制\"><a class=\"anchor\" href=\"#2-音频的压制\">#</a> (2). 音频的压制</h3>\n<p>在压制音频之前，我们需要先做另一件事，音轨检查。</p>\n<p>音轨检查需要检查：1. 是否为空音轨，2. 是否为重复音轨。</p>\n<p>蓝光原盘里有空音轨或者重复音轨这种事情极其常见，并且即使是空音轨，它的码率也和普通音轨完全一样，仅凭外表无法分辨。</p>\n<p>最常见的情况是，部分集数有评论音轨，部分集数没有。早期原盘为了统一格式，所有集都是双音轨，那么没有评论音轨的集数怎么办，要么填一条空音轨，要么重复主音轨。这俩在原盘里码率都是一样，空或者重复对制作商来说没有区别，哪种情况都有可能。</p>\n<p>判断空音轨很容易，在播放器里前后拉一遍，完全没有声音的就是空音轨，当然确保你此时打开了系统声音。</p>\n<p>重复音轨的判断就比较麻烦，因为你不知道是否只有某些地方做了改变，而其他地方完全相同。比较典型的是《魔法少女小圆 叛逆的物语》，晓美焰黑化的那段配音，有正常版，还有个音轨专门换成了病娇版，其他的部分完全一样，你不看介绍都不知道就那么一分钟的配音不同。</p>\n<p>判断两条好像一样的音轨是不是真的重复，以前靠肉眼看频谱，现在已经有自动化工具了，会在后续教程中介绍给大家。</p>\n<p>之后就是对音轨进行编码。</p>\n<p>按照 VCB-Studio 规范，对于不同内容的音轨，有不同的编码要求。</p>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B03%5D%20%E7%A5%9E%E4%B8%80%E6%A0%B7%E7%9A%84%E5%B7%A5%E5%85%B7%E4%BB%AC/media/image13.png\" alt=\"img\" /></p>\n<p>更详细的说明可以参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3ZjYi1zL1ZDQi1TX0NvbGxhdGlvbi9ibG9iL21hc3Rlci9zcGVjaWZpY2F0aW9uLm1k\">整理规范</span>。</p>\n<p>简单来说，如果原盘中为无损音轨，正片和特典的主音轨需要 flac 编码，而评论轨和真人特典的音轨需要 aac 编码；如果原盘中为有损音轨，在码率不太高时保留原样，码率较高时转为 aac 编码。</p>\n<p>flac 编码，实际在我们使用 eac3to 抽取时就可以直接抽取并转码为 flac（使用的是最高压缩等级）。如果你抽取为 wav，也可以手动转为 flac。</p>\n<pre><code>flac --compression-level-8 -o output.flac input.wav\n</code></pre>\n<p>​</p>\n<p><code>--compression-level-8</code>  指定压缩等级为最高（8）， <code>-o</code>  指定输出文件名。更详细的命令行参数可以查阅文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly94aXBoLm9yZy9mbGFjL2RvY3VtZW50YXRpb25fdG9vbHNfZmxhYy5odG1sJUUzJTgwJTgy\">https://xiph.org/flac/documentation_tools_flac.html。</span></p>\n<p>aac 的编码，我们选择 qaac 编码器，模式选择 cvbr，码率根据情况选择 192kbps 或者 320kbps。</p>\n<p>为什么选择 cvbr 以及码率为什么选这两个值，并没有什么特别的考虑，只是选择了约定俗成、大家都没有太大异议的一套规范。当然你也可以选用 tvbr。</p>\n<p>qaac 的命令行参数</p>\n<pre><code>qaac -i -v 192 -q 2 --no-delay -o output.aac input.flac\nqaac -i -V 127 -q 2 --no-delay --ignorelength -o output.m4a input.wav\n</code></pre>\n<p>​</p>\n<p><code>-v</code>  参数指定 cvbr 模式的目标码率， <code>-V</code>  参数指定 tvbr 模式的目标质量。使用 wav 输入的时候推荐打开   <code>--ignorelength</code> 。</p>\n<p>你可以在这里下载 qaac：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL251Nzc0L3FhYWMvcmVsZWFzZXMlRTMlODAlODI=\">https://github.com/nu774/qaac/releases。</span></p>\n<p>qaac 依赖于 Apple 的 CoreAudioToolbox 组件，所以你需要安装  iTunes，如果你不想安装 iTunes 的话，可以在 qaac.exe/qaac64.exe 的同目录下建立一个 QTfiles /  QTfiles64 文件夹，并在其中放置与之匹配的 32 位 / 64 位依赖。QTFiles 的获取可以使用 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL251Nzc0L21ha2Vwb3J0YWJsZQ==\">makeportable</span>，也可以直接下载别人导出完的：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0FuaW1Nb3VzZS9RVEZpbGVzJUUzJTgwJTgy\">https://github.com/AnimMouse/QTFiles。</span></p>\n<p>如果你想让 qaac 支持 flac、WavPack（.wv） 等格式的输入，则需要在根目录放置与 qaac 位数相匹配的依赖，可以参照 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL251Nzc0L3FhYWMvd2lraS9JbnN0YWxsYXRpb24=\">https://github.com/nu774/qaac/wiki/Installation</span> 进行配置。以 flac 为例，你可以去 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmFyZXdhcmVzLm9yZy9sb3NzbGVzcy5waHA=\">https://www.rarewares.org/lossless.php</span> 下载一个 libFLAC 的 dll 文件，以 libFLAC_dynamic.dll 或 libFLAC.dll 命名放置在 qaac 的根目录下。</p>\n<p>最后额外介绍一点 32bit 音轨无损编码内容。</p>\n<p>普通无损音轨位深为 16bit，Hi-Res 常见为 24bit，而一些最新的 Hi-Res 则有 32bit。32bit 又分为 32 位整数和 32 位浮点。幸运的是，目前蓝光原盘里我们还看不到这些烦人的 32bit 音轨。</p>\n<p>flac 虽然有对 32 位整数格式的规范，<s>但并没有编码器实现</s> 在 1.4.0 版本之后增加了对 32 位整数的编解码支持，至于 32 位浮点则完全不支持。</p>\n<p>qaac 支持 alac 无损编码，能够支持 32 位整数格式的编解码，编码命令请自行查阅 qaac 文档。</p>\n<p>一个对 32bit 音轨支持较好的格式 / 编码器为 WavPack，同时支持 32 位整数和 32 位浮点。你可以在这里下载并查阅其用法：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2F2cGFjay5jb20vZG93bmxvYWRzLmh0bWwlRTMlODAlODI=\">https://www.wavpack.com/downloads.html。</span></p>\n<h2 id=\"-15\"><a class=\"anchor\" href=\"#-15\">#</a> </h2>\n<h2 id=\"3-封装\"><a class=\"anchor\" href=\"#3-封装\">#</a> 3. 封装</h2>\n<p>压制完了视频，按规范转完了音频，准备好章节和字幕，就可以开始封装（混流）了。</p>\n<h3 id=\"-16\"><a class=\"anchor\" href=\"#-16\">#</a> </h3>\n<h3 id=\"1-mkv的封装\"><a class=\"anchor\" href=\"#1-mkv的封装\">#</a> (1). mkv 的封装</h3>\n<p>封装 mkv 使用的是之前提到过的唯一指定 mkv 处理工具 MKVToolNix。打开 mkvtoolnix-gui.exe，将需要封装的轨道依次拖入，按图中所示操作。</p>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B03%5D%20%E7%A5%9E%E4%B8%80%E6%A0%B7%E7%9A%84%E5%B7%A5%E5%85%B7%E4%BB%AC/media/image14.png\" alt=\"img\" /></p>\n<p>拖入第二个输入文件时，会出现以下弹窗，选择【作为输入文件添加到当前混流设置】。</p>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B03%5D%20%E7%A5%9E%E4%B8%80%E6%A0%B7%E7%9A%84%E5%B7%A5%E5%85%B7%E4%BB%AC/media/image15.png\" alt=\"img\" /></p>\n<p>有时章节不能直接拖入，可以按以下方法添加章节。</p>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B03%5D%20%E7%A5%9E%E4%B8%80%E6%A0%B7%E7%9A%84%E5%B7%A5%E5%85%B7%E4%BB%AC/media/image16.png\" alt=\"img\" /></p>\n<p>按照 VCB-Studio  规范，封装的轨道顺序为：视频轨、主音轨、评论音轨、字幕、章节。其中视频轨无需设置语言，保持为  und（Undetermined）即可。音轨和字幕都需要设置语言，一般为 ja（Japanese）。章节也需要设置语言，如果采用 Chapter xx 形式，设为 eng（English），如果填写了原盘日文章节名，设为 ja（Japanese）。</p>\n<p>视频轨和主音轨的 “默认轨道” 标识设置为 “是”，其他音轨以及字幕设为 “否”。</p>\n<p>外挂音轨的情况也按类似方式封装，输出时后缀名指定为 mka。</p>\n<p>另外需要注意一点，保证各轨道没有延迟（delay）。</p>\n<h4 id=\"-17\"><a class=\"anchor\" href=\"#-17\">#</a> </h4>\n<h4 id=\"mkvmerge的命令行操作\"><a class=\"anchor\" href=\"#mkvmerge的命令行操作\">#</a> mkvmerge 的命令行操作</h4>\n<p>最后补充一下 mkvmerge 的命令行用法，可以更灵活地进行批量封装。</p>\n<pre><code>mkvmerge --output &#123;output_file&#125; \\\n         --language 0:und --default-track 0:yes &#123;hevc_file&#125; \\\n         --language 0:jpn --default-track 0:yes --track-name &quot;0:Main Track&quot; &#123;audio1_file&#125; \\\n         --language 0:jpn --default-track 0:no --track-name &quot;0:Audio Commentary&quot; &#123;audio2_file&#125; \\\n         --chapters &#123;chapter_file&#125;\n</code></pre>\n<p>​</p>\n<p>其中  <code>--language</code>  设置轨道语言，前面的 0 指定输入文件的轨道 id，这里每个输入文件都是只含有一个轨道，因此只有 0。如果输入文件是 mkv 这样有多条轨道的文件，通过 id 选择需要处理的轨道。 <code>--default-track</code>  设置默认轨道，需要注意的是，新版本的 mkvmerge 默认所有轨道都是默认轨道（旧版本是默认否），因此对于需要设置为否的轨道，也要显式指定为否。 <code>--track-name</code>  设置轨道名称，对于多音轨情况可以选择性地命名来进行区分。</p>\n<p>更多的设置和详细参数请查阅 mkvmerge 文档。</p>\n<h3 id=\"-18\"><a class=\"anchor\" href=\"#-18\">#</a> </h3>\n<h3 id=\"2-mp4的封装\"><a class=\"anchor\" href=\"#2-mp4的封装\">#</a> (2). mp4 的封装</h3>\n<p>mp4 推荐使用 L-SMASH 进行封装，总监 EFS 给它写了一个方便的 GUI，可以在这里下载：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FtZWZzL2xzbWFzaC1tdXhlci1ndWklRTMlODAlODI=\">https://github.com/amefs/lsmash-muxer-gui。</span></p>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B03%5D%20%E7%A5%9E%E4%B8%80%E6%A0%B7%E7%9A%84%E5%B7%A5%E5%85%B7%E4%BB%AC/media/image17.png\" alt=\"img\" /></p>\n<p>由于 VCB-Studio 制作流程中对于 mp4 的制作规格较低，因此只支持有限的封装方式。</p>\n<p>另外 ffmpeg 或者 MeGUI 的 mp4 封装工具也可以用来封 mp4，不过可靠性较差，一般不建议使用。</p>\n<p>虽然 L-SMASH 比较可靠，但是其对于源的要求也较高，如果源是由 BD 压制出来的，那么 L-SMASH  是一个最好的选择；如果源是 web 或者录播等，那么使用 L-SMASH 反而可能出错。而且 L-SMASH 只支持封装  AVC、HEVC、VC1 的视频编码格式以及 AAC、DTS、E-AC-3、AC-3、MP3 等常规音频编码格式，如果你需要封装 VVC、AV1 等新生编码视频格式或者 OPUS 等音频格式就需要使用其他的 mp4 封装工具了，比如 gpac 的 mp4box，你可以从 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudmlkZW9oZWxwLmNvbS9zb2Z0d2FyZS9NUDRCb3g=\">https://www.videohelp.com/software/MP4Box</span> 获取。</p>\n<h2 id=\"-19\"><a class=\"anchor\" href=\"#-19\">#</a> </h2>\n<h2 id=\"4-检查\"><a class=\"anchor\" href=\"#4-检查\">#</a> 4. 检查</h2>\n<p>完成封装后，压制工作就完成了大半，不过先别急着上传，还需要做一些最后的检查。</p>\n<h3 id=\"-20\"><a class=\"anchor\" href=\"#-20\">#</a> </h3>\n<h3 id=\"1-花屏检查\"><a class=\"anchor\" href=\"#1-花屏检查\">#</a> (1). 花屏检查</h3>\n<p>压片过程中，由于机器频率过高，或者脚本出现问题，或者遭到来自宇宙的高能粒子打击，成品可能损坏花屏，因此需要对比检查成品画面。</p>\n<p>我们使用的工具是 RPChecker，可以在这里下载：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3ZjYi1zL3JwLWNoZWNrZXIlRTMlODAlODI=\">https://github.com/vcb-s/rp-checker。</span></p>\n<p>首先在上方右键选择【使用 PSNR (VS)】模式，请不要使用默认的 ffmpeg 模式，其结果相当不可靠。VS  模式需要把 vapoursynth 加入环境变量，vapoursynth 已经集成在 OKEGui\\tools  中，加入环境变量的方法可以参考附录。</p>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B03%5D%20%E7%A5%9E%E4%B8%80%E6%A0%B7%E7%9A%84%E5%B7%A5%E5%85%B7%E4%BB%AC/media/image18.png\" alt=\"img\" /></p>\n<p>点击【载入】进入载入界面，左边放入对照组（原盘），右边放入压制成品，开始对比。</p>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B03%5D%20%E7%A5%9E%E4%B8%80%E6%A0%B7%E7%9A%84%E5%B7%A5%E5%85%B7%E4%BB%AC/media/image19.png\" alt=\"img\" /></p>\n<p>对比完成后，如果全为绿色，则检测通过；如果有红色的帧，则可能存在问题，需要定位到相应位置实际播放检查。</p>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B03%5D%20%E7%A5%9E%E4%B8%80%E6%A0%B7%E7%9A%84%E5%B7%A5%E5%85%B7%E4%BB%AC/media/image20.png\" alt=\"img\" /></p>\n<h3 id=\"-21\"><a class=\"anchor\" href=\"#-21\">#</a> </h3>\n<h3 id=\"2-crc32\"><a class=\"anchor\" href=\"#2-crc32\">#</a> (2). CRC32</h3>\n<p>确认视频没有花屏，音频没有错漏，字幕和章节都带上了之后，就可以着手上传，将压制成品递交给整理组。</p>\n<p>我们需要用到 RapidCRC 这个工具，打上 CRC32。</p>\n<p>使用方法比较简单，所有文件拖进去，点击【CRC into Filename】。</p>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B03%5D%20%E7%A5%9E%E4%B8%80%E6%A0%B7%E7%9A%84%E5%B7%A5%E5%85%B7%E4%BB%AC/media/image21.png\" alt=\"img\" /></p>\n<p>当你收到一堆打了 CRC 的文件时，也可以把它们拖进来，工具会告诉你是否正确。</p>\n<h2 id=\"-22\"><a class=\"anchor\" href=\"#-22\">#</a> </h2>\n<h2 id=\"5-合并与切割\"><a class=\"anchor\" href=\"#5-合并与切割\">#</a> 5. 合并与切割</h2>\n<p>上面提到的制作流程都是基于原盘里是一个视频对应一个 m2ts 的情况，实际还会遇到两种特殊情况：一个 m2ts 里含有多个视频，称为连体盘；多个 m2ts 组成一个视频，称为肉酱盘。</p>\n<p>连体盘常见于早期蓝光原盘，经常是一卷里的 2 或 3 集正片连体位于同一个 m2ts 中，现在可能会在泡面番的正片或者普通番的 PV 集 CM 集之类的特典中遇到。对于连体盘我们需要进行切割，拆分为每集一个 mkv 文件，然后再按上面的制作流程进行压制。</p>\n<p>肉酱盘也常见于早期蓝光原盘，现在基本上只会在原盘提供有字 / 无字双版本正片时，以及极少数特典中遇到。对于肉酱盘我们需要进行合并，把分散在多个 m2ts 中的内容合为一个 mkv 文件，然后再按上面的制作流程进行压制。</p>\n<h3 id=\"-23\"><a class=\"anchor\" href=\"#-23\">#</a> </h3>\n<h3 id=\"1-肉酱盘的合并\"><a class=\"anchor\" href=\"#1-肉酱盘的合并\">#</a> (1). 肉酱盘的合并</h3>\n<h4 id=\"-24\"><a class=\"anchor\" href=\"#-24\">#</a> </h4>\n<h4 id=\"使用eac3to合并\"><a class=\"anchor\" href=\"#使用eac3to合并\">#</a> 使用 eac3to 合并</h4>\n<p>肉酱盘中一个视频分散在多个 m2ts 里，由 mpls 将他们连接起来。我们可以通过 eac3to 来查看视频都由哪些 m2ts 组成。</p>\n<pre><code>eac3to &quot;path\\\\to\\\\mpls&quot; -progressnumbers\n</code></pre>\n<p>​</p>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B03%5D%20%E7%A5%9E%E4%B8%80%E6%A0%B7%E7%9A%84%E5%B7%A5%E5%85%B7%E4%BB%AC/media/image22.png\" alt=\"img\" /></p>\n<p>这个 mpls 就是由 00002、00003、00007 这三个 m2ts 依次连接而成。接下来可以按照与抽取单个 m2ts 类似的方式，指定轨道 id 来抽取合并之后的轨道。以抽取音轨为例，使用以下命令：</p>\n<pre><code>eac3to 00001.mpls 3: 00001.flac\n</code></pre>\n<p>​</p>\n<p>eac3to 也支持直接拼接 m2ts，对于上面的情况，如果我们只需要保留 00002 和 00003，而将 00007 丢弃掉，那么可以通过以下命令实现。</p>\n<pre><code>eac3to 00002.m2ts+00003.m2ts 3: 00001.flac\n</code></pre>\n<p>​</p>\n<h4 id=\"-25\"><a class=\"anchor\" href=\"#-25\">#</a> </h4>\n<h4 id=\"章节的合并\"><a class=\"anchor\" href=\"#章节的合并\">#</a> 章节的合并</h4>\n<p>eac3to 可以从 mpls 中抽取合并后的章节，不过抽取出的章节的章节名为空，需要手动填写，比较麻烦。因此更推荐使用 ChapterTool 来进行章节和合并。</p>\n<p>打开 ChapterTool，把 mpls 拖进去。对于具有多个 m2ts 的 mpls，可以在右上角下拉框选择各个 m2ts 的章节。右键下拉框，可以看到【合并章节】的选项，点击就可以将各个 m2ts 的章节合并起来，之后保存为 txt 即可。</p>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B03%5D%20%E7%A5%9E%E4%B8%80%E6%A0%B7%E7%9A%84%E5%B7%A5%E5%85%B7%E4%BB%AC/media/image23.png\" alt=\"img\" /></p>\n<h4 id=\"-26\"><a class=\"anchor\" href=\"#-26\">#</a> </h4>\n<h4 id=\"使用mkvtoolnix合并\"><a class=\"anchor\" href=\"#使用mkvtoolnix合并\">#</a> 使用 MKVToolNix 合并</h4>\n<p>一些新的研究发现，对于少数情况（比如视频开头有 1s 黑帧并且第一个章节点指示为 1s  时间戳），MKVToolNix 的合并结果更为准确。MKVToolNix 会分析视频位流，并对一些不规范的位流做出修复，因此现在我们更推荐使用  MKVToolNix 进行合并。</p>\n<p>MKVToolNix 合并方法非常简单，将 mpls 直接拖入 MKVToolNix，然后混流为 mkv 即可。</p>\n<p>第一次拖入 mpls 时可能会询问是否扫描其他播放列表，将其设为默认从不扫描即可。</p>\n<p>MKVToolNix 也可以合并章节，不过需要注意，确保这里的章节命名模板设为【Chapter <span class=\"exturl\" data-url=\"TlVNOjI=\">NUM:2</span>】，而不是【第 <span class=\"exturl\" data-url=\"TlVNOjI=\">NUM:2</span> 章】。</p>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B03%5D%20%E7%A5%9E%E4%B8%80%E6%A0%B7%E7%9A%84%E5%B7%A5%E5%85%B7%E4%BB%AC/media/image24.png\" alt=\"img\" /></p>\n<h3 id=\"-27\"><a class=\"anchor\" href=\"#-27\">#</a> </h3>\n<h3 id=\"2-一般的物理合并\"><a class=\"anchor\" href=\"#2-一般的物理合并\">#</a> (2). 一般的物理合并</h3>\n<p>MKVToolNix 也支持一般的物理合并，通过追加合并（append）功能实现。</p>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B03%5D%20%E7%A5%9E%E4%B8%80%E6%A0%B7%E7%9A%84%E5%B7%A5%E5%85%B7%E4%BB%AC/media/image25.png\" alt=\"img\" /></p>\n<p>MKVToolNix 添加文件，有三种方法：</p>\n<ul>\n<li>添加文件，指作为独立轨道加入，一般在混流多个轨道时使用。</li>\n<li>追加合并，指把添加的各个文件解封装，合并位流，再重新封装。合并多个 hevc 或者 avc 的 raw 文件，或者合并多个 mkv，都是使用这个功能。</li>\n<li>添加为其余部分，指把添加的各文件的比特流直接前后拼接在一起，只有像 DVD 那样，将视频按固定大小直接切分，每个部分无法独立构成完整视频的情况才会用到。一般不会使用这个功能。</li>\n</ul>\n<p>追加合并这个功能，可以把多个视频和音频连在一起。章节没办法追加，因为章节无法确定总长度。所以一般不勾选章节，或者需要自己提前准备。</p>\n<p>追加合并成功的条件比较苛刻，只能多个 mkv 一起合并，或者多个 raw 文件一起合并，而不能 mkv 和 raw 文件交替合并。另外对于视频和音频的格式，甚至一些编码参数都有要求。</p>\n<p>特别需要注意的是，不要合并 flac，MKVToolNix 无法处理 flac 的文件头，合并出来的音轨会非常奇怪。新版甚至就直接不支持合并 flac 了，会报错。因此对于需要合并 flac 的情况，先抽取出来转为 wav，合并之后再转为 flac。</p>\n<p>当格式不匹配，混流会报错，注意检查。哪怕没有出现报错，也需要手动播放再确认一遍合并的效果。来回拖动进度条，仔细观察连接部分是否有花屏等。</p>\n<h3 id=\"-28\"><a class=\"anchor\" href=\"#-28\">#</a> </h3>\n<h3 id=\"3-连体盘的切割\"><a class=\"anchor\" href=\"#3-连体盘的切割\">#</a> (3). 连体盘的切割</h3>\n<p>连体盘一般使用 MKVToolNix 按章节切割。将连体盘的 mpls 拖入，切换到输出页面，选择切割模式【在章节之前】，将鼠标移到章节编号栏上可以看到说明。</p>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B03%5D%20%E7%A5%9E%E4%B8%80%E6%A0%B7%E7%9A%84%E5%B7%A5%E5%85%B7%E4%BB%AC/media/image26.png\" alt=\"img\" /></p>\n<p>这里需要填写作为切点的章节序号，各个切点用逗号分开，章节从 1 开始编号，如果给出 n 个切点，那么会得到 n+1 个输出。</p>\n<p>在切割之前，我们需要播放连体的视频文件，确定每个部分开头的章节序号，早期原盘常见为两集或者三集正片连体，我们需要找到第二集和第三集起始的章节。</p>\n<p>以偶像大师的原盘为例，正片三集连体，这是它的章节。我们播放后发现，第二集开始于章节 07，第三集开始于章节  13。我们在切割的章节编号栏填入：07,13（注意不要有空格）。这样就把 01-06 切分为第一集，07-12  切分为第二集，13 - 最后切分为第三集。</p>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B03%5D%20%E7%A5%9E%E4%B8%80%E6%A0%B7%E7%9A%84%E5%B7%A5%E5%85%B7%E4%BB%AC/media/image27.png\" alt=\"img\" /></p>\n<p>这样切出来的第二集和第三集的章节会存在一些问题，需要我们手动修正章节名称。</p>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B03%5D%20%E7%A5%9E%E4%B8%80%E6%A0%B7%E7%9A%84%E5%B7%A5%E5%85%B7%E4%BB%AC/media/image28.png\" alt=\"img\" /></p>\n<p>另外需要特别注意的是，如果切割章节点的帧不是关键帧，那么会选择章节点之后最近一个关键帧作为实际切割点，这样切出来的结果和我们预想的就会存在偏差。不过按照蓝光规范，章节点保证为关键帧；同时 VCB-Studio 的成品，也保证章节点为关键帧，可以放心大胆地切。</p>\n<h3 id=\"-29\"><a class=\"anchor\" href=\"#-29\">#</a> </h3>\n<h3 id=\"4-一般的物理切割\"><a class=\"anchor\" href=\"#4-一般的物理切割\">#</a> (4). 一般的物理切割</h3>\n<p>MKVToolNix 除了支持按章节切割，也支持按帧切割。切割模式选择【按帧 / 场编号分段】，分段栏需要输入形如  start-end 的帧号范围。这里的帧号从 1 开始计数，需要在我们通常使用的 0-indexed 帧号上加  1。首尾切点的帧都将包含到输出中。</p>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B03%5D%20%E7%A5%9E%E4%B8%80%E6%A0%B7%E7%9A%84%E5%B7%A5%E5%85%B7%E4%BB%AC/media/image27.png\" alt=\"img\" /></p>\n<p>以这个章节为例，如果我们想切出 Chapter 02 到 Chapter 03，那么实际需要的帧为 2638-4794，最后别忘了整体加 1，应该填写 2639-4795。</p>\n<p>与按章节切割类似，如果你指定的首尾帧号不是关键帧，那么会自动移动到最近的关键帧作为实际切点。</p>\n<p>由此我们也可以知道，视频的物理切割，只能精确到关键帧。非关键帧的切割，必须依靠重编码来完成。</p>\n<p>识别关键帧的方法，除了前面提到的按章节点以外，还可以通过 VapourSynth 直接观察每个帧的类型，具体方法等到 VapourSynth 章节再讲述。</p>\n<p>另外需要注意的是，MKVToolNix 不支持对 flac 的切割。遇到音轨是 flac 的情况，先将 flac 抽取出来，转为 wav，再封装成新的 mkv 进行切割。flac 转 wav 可以使用 flac 命令行工具。</p>\n<pre><code>flac -d -o output.wav input.flac\n</code></pre>\n<p>​</p>\n<p>音频的切割并不依赖于关键帧，我们可以使用 ffmpeg 对其进行精准到毫秒（实际是精确到 sample 量级）的切割。</p>\n<pre><code>ffmpeg -y -i &#123;input_audio&#125; -map a:0 -ss &#123;trim_begin&#125; -to &#123;trim_end&#125; -acodec copy -y &#123;output_audio&#125;\n</code></pre>\n<p>​</p>\n<p>{trim_begin} 和 {trim_end} 填入起始和结束的时间戳，格式为 hh:mm:ss.mss 或者 ss.mss。</p>\n<p>一些音频编码器，比如 flac、qaac 也支持对输入音频的一部分进行编码而不用提前切割，具体参数设置可以自行查阅文档。</p>\n<p>如果切割 aac 音轨，其最小独立单元不是 1 个 sample 而是 1024 个 sample，因此输出最好选用 mka，以避免切割产生的 delay 造成影响。</p>\n<h2 id=\"-30\"><a class=\"anchor\" href=\"#-30\">#</a> </h2>\n<h2 id=\"6-练习\"><a class=\"anchor\" href=\"#6-练习\">#</a> 6. 练习</h2>\n<p>本章涉及的工具众多，操作复杂，这里提供一些简单的练习，希望大家能熟悉工具的使用。</p>\n<h3 id=\"-31\"><a class=\"anchor\" href=\"#-31\">#</a> </h3>\n<h3 id=\"1\"><a class=\"anchor\" href=\"#1\">#</a> (1)</h3>\n<p>在你手上的原盘中任选一集正片，按照本章流程，抽取视频、音频、章节、字幕（如有），视频不做处理，音频和章节按照规范进行处理，最后封装成 mkv。</p>\n<p>做完这一步，恭喜你，你已经掌握了一种最简单的 BDRip 制作方法，仅仅将原盘的有用信息提取出来而不做其他处理，一般地我们将其称为 BDRemux。</p>\n<h3 id=\"-32\"><a class=\"anchor\" href=\"#-32\">#</a> </h3>\n<h3 id=\"2\"><a class=\"anchor\" href=\"#2\">#</a> (2)</h3>\n<p>一般一集 TV 动画可以分为：OP、A Part、B Part、ED、Preview 等部分。任选一集 VCB-Studio 的成品正片，从 A、B Part 之间切分为两个 mkv。</p>\n<h3 id=\"-33\"><a class=\"anchor\" href=\"#-33\">#</a> </h3>\n<h3 id=\"3\"><a class=\"anchor\" href=\"#3\">#</a> (3)</h3>\n<p>将 (2) 中得到两个 mkv 合并为一个，然后与原始的视频进行 rpc 检查。</p>\n<h2 id=\"-34\"><a class=\"anchor\" href=\"#-34\">#</a> </h2>\n<h2 id=\"附录-设置环境变量\"><a class=\"anchor\" href=\"#附录-设置环境变量\">#</a> 附录 设置环境变量</h2>\n<p>首先，假设我们将工具放在 C 盘下名为 mypath 的文件夹中。当然你也可以将其放在其他盘符其他位置。</p>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B03%5D%20%E7%A5%9E%E4%B8%80%E6%A0%B7%E7%9A%84%E5%B7%A5%E5%85%B7%E4%BB%AC/media/image01.png\" alt=\"img\" /></p>\n<p>右键我的电脑，选择【属性】。在打开的设置页面最右侧（某些版本中是最左侧）中选择【高级系统设置】。</p>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B03%5D%20%E7%A5%9E%E4%B8%80%E6%A0%B7%E7%9A%84%E5%B7%A5%E5%85%B7%E4%BB%AC/media/image02.png\" alt=\"img\" /></p>\n<p>在弹出的窗口中选择【环境变量】。</p>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B03%5D%20%E7%A5%9E%E4%B8%80%E6%A0%B7%E7%9A%84%E5%B7%A5%E5%85%B7%E4%BB%AC/media/image03.png\" alt=\"img\" /></p>\n<p>然后在上方的用户变量中选择【Path】一栏进行编辑，新建一个 C:\\mypath 条目。</p>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B03%5D%20%E7%A5%9E%E4%B8%80%E6%A0%B7%E7%9A%84%E5%B7%A5%E5%85%B7%E4%BB%AC/media/image04.png\" alt=\"img\" /></p>\n<p><img data-src=\"https://github.com/vcb-s/guides/raw/master/Basics/%5B03%5D%20%E7%A5%9E%E4%B8%80%E6%A0%B7%E7%9A%84%E5%B7%A5%E5%85%B7%E4%BB%AC/media/image05.png\" alt=\"img\" /></p>\n<p>最后重新打开命令行，输入 flac 或者 ffmpeg 之类的命令来检测是否生效。</p>\n",
            "tags": [
                "压制技术"
            ]
        },
        {
            "id": "https://sakurame.eu.org/2023/06/09/vcbstudio/%E7%86%9F%E6%82%89VapourSynth/",
            "url": "https://sakurame.eu.org/2023/06/09/vcbstudio/%E7%86%9F%E6%82%89VapourSynth/",
            "title": "熟悉VapourSynth",
            "date_published": "2023-06-09T14:25:12.000Z",
            "content_html": "<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"抱歉, 这个密码看着不太对, 请再试试.\" data-whm=\"抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"6c233c169e257d2ac381cd6dc8dade3e7a59f968aca42902febdb624f293d511\"></script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-surge\">\n      <input class=\"hbe hbe-input-field hbe-input-field-surge\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-surge\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-surge\" data-content=\"个人不公开教程备份\">个人不公开教程备份</span>\n      </label>\n      <svg class=\"hbe hbe-graphic hbe-graphic-surge\" width=\"300%\" height=\"100%\" viewBox=\"0 0 1200 60\" preserveAspectRatio=\"none\">\n        <path d=\"M1200,9c0,0-305.005,0-401.001,0C733,9,675.327,4.969,598,4.969C514.994,4.969,449.336,9,400.333,9C299.666,9,0,9,0,9v43c0,0,299.666,0,400.333,0c49.002,0,114.66,3.484,197.667,3.484c77.327,0,135-3.484,200.999-3.484C894.995,52,1200,52,1200,52V9z\"></path>\n      </svg>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">",
            "tags": [
                "压制技术"
            ]
        },
        {
            "id": "https://sakurame.eu.org/2023/05/18/vcbstudio/%E5%BC%80%E6%BA%90%E4%B8%80%E4%B8%8B%E5%8E%8B%E5%88%B6%E7%BB%84%E8%80%83%E8%AF%95%E7%9A%84%E8%AF%95%E9%A2%98/",
            "url": "https://sakurame.eu.org/2023/05/18/vcbstudio/%E5%BC%80%E6%BA%90%E4%B8%80%E4%B8%8B%E5%8E%8B%E5%88%B6%E7%BB%84%E8%80%83%E8%AF%95%E7%9A%84%E8%AF%95%E9%A2%98/",
            "title": "开源一下压制组考试的试题",
            "date_published": "2023-05-18T03:08:14.000Z",
            "content_html": "<p>This is a test for candidates who wish to participate in the training class organized by VCB-Studio. Finish as many problems as you can, and then pack your answers, files, necessary attachments into a RAR/7z file with a proper recovery record embedded. Source files already shared to you should not be packed in (otherwise it’s too large). Upload it to <span class=\"exturl\" data-url=\"aHR0cDovL3Bhbi5iYWlkdS5jb20=\">pan.baidu.com</span>. Share the link via e-mail to <span class=\"exturl\" data-url=\"bWFpbHRvOnZjYi1zdHVkaW9AcXEuY29t\">vcb-studio@qq.com</span> before 23:59 pm, 17th Feb 2021. Late submissions will NOT be considered.</p>\n<p>You may discuss with other participants, but any form of plagiarism will NOT be tolerated.</p>\n<p>This test has 4 sections. Answers should be made in English.</p>\n<p>1 Please describe yourself as who you are, where do you study, how do you come to know VCB-Studio and why are you interested in this project, etc. Please do not write more than 500 words, or approximately 1 page. (15 marks)</p>\n<p>2 In the file Yurisa.rar, two sets of pictures have been provided for you. PNGs are the source, and WEBPs are transcoded from PNGs with quality ~ 75%. Your task is to convert the sources to HEIF/HEIC, with sizes comparable to the WEBPs. You are free to utilize existing tools, but you need to describe clearly where you find the tool and how to use it. Comment on the quality and compatibility of HEIF/HEIC format, and why/why not you may recommend us switching to the new format as the upgrade for WEBP in 2021. (20 marks)</p>\n<p>3 MSU publishes video encoder tests every year, with the latest one here: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb21wcmVzc2lvbi5ydS92aWRlby9jb2RlY19jb21wYXJpc29uL2hldmNfMjAyMC9tYWluX3JlcG9ydC5odG1s\">https://compression.ru/video/codec_comparison/hevc_2020/main_report.html</span>. According to the test, several encoders outperformed x265 in the ripping use-case (offline, 1fps) like Aurora AV1 Encoder. Pick anyone from the red rectangle below as your encoder/format:</p>\n<p><img data-src=\"https://ptpimg.me/9i5m5a.jpg\" alt=\"\" /></p>\n<p>Encode the source file 00020 [3D62052E].m2ts with no more than 2500 Kbps of video bitrate. You are free to source for new versions / 10-bit variants of the shortlisted encoder, just make sure you have a way to decode their deliverables. Once the encoding is done, compare it to the file 00020 [5A009987].mp4 given to you. We have encoded this file via<br />\nx265-10bit with no pre-processing. Judge qualitatively whether your chosen encoder is appropriate for the anime ripping use-case. You may want to sample a few frames, attach some screenshots, comment on how moving scenes look like, and playback compatibilities. (40 marks)</p>\n<p>4 When we check an encoded file, we need to locate frames that have been encoded exceptionally awful. Certain tools can be used to export a “score” for each frame, like SSIM. You are given a list of scores (at least 10 scores and no more than 10000) where the first score is tied to the first frame, the second score tied to the second frame, etc. Each score is<br />\nbetween 0 and 100. Calculate the average score and the population standard deviation for the scores. Output the frame numbers with scores strictly lower than average – 2 * standard deviation. Frame numbers should be sorted from smallest to biggest. Separate the frame numbers with a single space, append no space but a new line to the last frame number. If<br />\nthere are none of such frames, just print an empty line. Use C/C++/Java/Python/C# to write a console program. Read the input from the standard input and write it to standard output. Do NOT use libraries other than built-in ones (for example, no “import numpy as np”). Submit your source code. (25 marks)</p>\n<p>Use the example below for your troubleshooting:</p>\n<p>Input:</p>\n<p>91.45 66.73 97.3 67.51 92.84 77.88 89.57 90.06 60.8 89.12 82.33 92.47 80.13 81.08 80.34 89.77 60.03 79.95 93.01 95.39 93.64 81.67 82.48 66.6 90.74 68.97 71.71 92.07 72.42 84.08 72.18 67.53 94.63 96.19 99 80.84 66.24 80.66 68.4 90.23 96.87 70.08 95.9 74.05 85.03 80.54 80.77 92.41 76.53 96.39 75.33 87.14 95 71.21 96.72 97.61 91.53 83.51 84.74 75.75 80.69 70.72 83.14 87.33 83.11 93.95 73.87 94.04 82.34 84.02 89.91 88.82 93.41 74.8 73.45 89.85 87.75 82.02 92.92 72.51 91.33 98.77 67.58 98.79 67.29 81.23 80.4 81.26 66.94 75.74 73.59 87.64 93.72 99.9 72.31 93.47 91.05 81.5 84.89 67.47 91.71 89.89 60.79 68.24 79.3 80.75 75.75 76.93 73.7 77.59 94.79 68.13 88.55 76.01 70.39 82.24 70.13 79.72 86.7 91.33 75.03 70.36 91.39 67.09 70.16 66.05 85.44 81 91.46 75.96 98.76 76.45 98.6 92.46 82.45 97.07 96.16 93.1 80.51 97.19 90.56 67.88 83.74 93.15 70.27 97.88 93.38 77.59 76.85 88.19 70.91 94.85 93.1 72.02 65.1 73.65 70.52 84.1 76.4 65.37 80.56 69.96 79.61 73.24 89.84 75.41 94.17 77.59 73.08 64.57 65.72 65.36 90.52 83.55 76.29 88.57 93.46 66.39 75.8 99.52 86.32 69.51 73.44 76.22 71.33 62.05 99.7 80.02 73.68 93.14 74.24 80.7 96.47 85.42 87.3 85.27 81.07 87.11 83.59 65.31 78.74 69.48 62.7 88.88 78.87 89.39 88.75 77.29 73.03 76.64 62.93 98.89 59.53 94.54 90.95 79.49 88.84 73.03 58.19 76.71 87.32 67.27 97.54 92.63 91.25 60.09 99.31 74.21 76.38 87.48</p>\n<p>Output:</p>\n<p>17 213 219 226<br />\nExplanation:</p>\n<p>Average – 2 * STDEV.P ≈ 60.51982; there are 4 numbers smaller than this: 17th, 213th, 219th,<br />\nand 226th.</p>\n",
            "tags": [
                "压制技术"
            ]
        },
        {
            "id": "https://sakurame.eu.org/2023/05/17/vcbstudio/%E5%BC%80%E6%BA%90%E4%B8%80%E4%B8%8B%E5%BD%93%E5%88%9D%E5%8E%8B%E5%88%B6%E7%BB%84%E5%85%A5%E7%BB%84%E8%80%83%E8%AF%95%E7%9A%84%E7%AD%94%E5%8D%B7/",
            "url": "https://sakurame.eu.org/2023/05/17/vcbstudio/%E5%BC%80%E6%BA%90%E4%B8%80%E4%B8%8B%E5%BD%93%E5%88%9D%E5%8E%8B%E5%88%B6%E7%BB%84%E5%85%A5%E7%BB%84%E8%80%83%E8%AF%95%E7%9A%84%E7%AD%94%E5%8D%B7/",
            "title": "开源一下当初压制组入组考试的答卷",
            "date_published": "2023-05-17T14:24:46.000Z",
            "content_html": "<div class=\"hbe hbe-container\" id=\"hexo-blog-encrypt\" data-wpm=\"抱歉, 这个密码看着不太对, 请再试试.\" data-whm=\"抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.\">\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"fb34bd6cd74b12ca495c94fdffa29a31cb7211652cf8119073b9a629d07fbf9d\"></script>\n  <div class=\"hbe hbe-content\">\n    <div class=\"hbe hbe-input hbe-input-surge\">\n      <input class=\"hbe hbe-input-field hbe-input-field-surge\" type=\"password\" id=\"hbePass\">\n      <label class=\"hbe hbe-input-label hbe-input-label-surge\" for=\"hbePass\">\n        <span class=\"hbe hbe-input-label-content hbe-input-label-content-surge\" data-content=\"密码请根据关于页说明在评论区留言或者发邮件获取，推荐评论区留言方式获取\">密码请根据关于页说明在评论区留言或者发邮件获取，推荐评论区留言方式获取</span>\n      </label>\n      <svg class=\"hbe hbe-graphic hbe-graphic-surge\" width=\"300%\" height=\"100%\" viewBox=\"0 0 1200 60\" preserveAspectRatio=\"none\">\n        <path d=\"M1200,9c0,0-305.005,0-401.001,0C733,9,675.327,4.969,598,4.969C514.994,4.969,449.336,9,400.333,9C299.666,9,0,9,0,9v43c0,0,299.666,0,400.333,0c49.002,0,114.66,3.484,197.667,3.484c77.327,0,135-3.484,200.999-3.484C894.995,52,1200,52,1200,52V9z\"></path>\n      </svg>\n    </div>\n  </div>\n</div>\n<script data-pjax src=\"/lib/hbe.js\"></script><link href=\"/css/hbe.style.css\" rel=\"stylesheet\" type=\"text/css\">",
            "tags": [
                "压制技术"
            ]
        }
    ]
}