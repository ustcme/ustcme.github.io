{
    "version": "https://jsonfeed.org/version/1",
    "title": "Sakura • All posts by \"pgp\" tag",
    "description": "一个专注于技术和思考分享的博客",
    "home_page_url": "https://sakurame.eu.org",
    "items": [
        {
            "id": "https://sakurame.eu.org/2024/03/21/privacy/%E6%9F%90%E7%A7%91%E5%AD%A6%E7%9A%84PGP%E7%AE%97%E5%8F%B7%E6%8C%87%E5%8D%97/",
            "url": "https://sakurame.eu.org/2024/03/21/privacy/%E6%9F%90%E7%A7%91%E5%AD%A6%E7%9A%84PGP%E7%AE%97%E5%8F%B7%E6%8C%87%E5%8D%97/",
            "title": "某科学的PGP算号指南",
            "date_published": "2024-03-21T14:55:02.000Z",
            "content_html": "<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>我们都知道，PGP 公钥的指纹是 40 位的十六进制哈希值，一般以结尾的 8 位或 16 位十六进制数字做为密钥的 KeyID。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZG91YmFuLmNvbS9ub3RlLzc2Mzk3ODk1NS8/X2k9NTU4NzIzNmt1Z0JuMWosNTcwNDgxOWt1Z0JuMWo=\">一位 PGP 进步青年的科学算号实践</span> 的作者通过「科学」的算号过程成功生成了 8 位「靓号」，但是仅仅 8 位「靓号」可能出现下面这种情况：</p>\n<p><img data-src=\"https://blog.dejavu.moe/posts/the-scientific-vanity-pgp-counting-guide/0x8.webp\" alt=\"8 位 KeyID\" />8 位 KeyID</p>\n<p>因为 8 位的 KeyID 太容易撞车了，所以现在很多公共 Key Server 或使用 PGP 的应用中都至少显示 16 位以上的 KeyID，我们的目标是星辰大海，所以我们要「科学」地计算至少 12 位以上的「靓号」。</p>\n<p>结合这几天和群友的算号实践，算号难度和时间只跟一点点因素有关：PGP 密钥使用的算法、目标「靓号」的长度、算号机器的性能再加一点点运气。</p>\n<h2 id=\"开始算号\"><a class=\"anchor\" href=\"#开始算号\">#</a> 开始算号</h2>\n<h3 id=\"cpu-算号\"><a class=\"anchor\" href=\"#cpu-算号\">#</a> CPU 算号</h3>\n<p>CPU 算号的条件比较简单，在 Linux 和 macOS 都可以算 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmRlamF2dS5tb2UvcG9zdHMvdGhlLXNjaWVudGlmaWMtdmFuaXR5LXBncC1jb3VudGluZy1ndWlkZS8jZm46MQ==\">1</span> ，CPU 算号的项目：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1JlZEwwdHVzL1Zhbml0eUdQRw==\">VanityGPG</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0Vycml5L2dwZ19hd2Vzb21lX2tleWlk\">gpg_awesome_keyid</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2Jub2N0aXMvZzNr\">g3k</span></li>\n</ul>\n<p>我推荐使用 VanityGPG 项目，它的效率比较高。生成 Ed25519 类型的靓号，实测算力如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">CPU</th>\n<th style=\"text-align:center\">Calculation</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Intel Xeon Gold 6133 (4 Core)</td>\n<td style=\"text-align:center\">17,000,000 hash/s</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Apple M1 ( MacBook Air)</td>\n<td style=\"text-align:center\">32,000,000 hash/s</td>\n</tr>\n</tbody>\n</table>\n<p>VanityGPG 比较吃 CPU 的线程数，因此选择核心和线程数量更多的算号机器效率更佳。</p>\n<h4 id=\"linuxwsl2-安装\"><a class=\"anchor\" href=\"#linuxwsl2-安装\">#</a> Linux/WSL2 安装</h4>\n<h4 id=\"以-debian-系统为例安装需要的软件包\"><a class=\"anchor\" href=\"#以-debian-系统为例安装需要的软件包\">#</a> 以 Debian 系统为例，安装需要的软件包</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> <span class=\"token function\">git</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>rustc <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">cargo</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>clang <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">make</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>pkg-config <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>nettle-dev <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>libssl-dev <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>capnproto <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>libsqlite3-dev</pre></td></tr></table></figure><p>使用 Cargo 安装 VanityGPG</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cargo</span> <span class=\"token function\">install</span> vanity_gpg</pre></td></tr></table></figure><h4 id=\"macos-安装\"><a class=\"anchor\" href=\"#macos-安装\">#</a> macOS 安装</h4>\n<p>前提：安装 Homebrew 包管理器</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>brew <span class=\"token function\">install</span> rust <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">cargo</span> <span class=\"token function\">install</span> vanity_gpg</pre></td></tr></table></figure><h4 id=\"使用方法\"><a class=\"anchor\" href=\"#使用方法\">#</a> 使用方法</h4>\n<p>查看 VanityGPG 帮助信息</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vanity_gpg <span class=\"token number\">0.3</span>.2</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>A simple tool <span class=\"token keyword\">for</span> generating and filtering vanity GPG keys, c0nCurr3nt1Y</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>USAGE:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    vanity_gpg <span class=\"token punctuation\">[</span>OPTIONS<span class=\"token punctuation\">]</span> <span class=\"token parameter variable\">--pattern</span> <span class=\"token operator\">&lt;</span>PATTERN<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>OPTIONS:</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    -c, --cipher-suite <span class=\"token operator\">&lt;</span>CIPHER_SUITE<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            Cipher suite <span class=\"token punctuation\">[</span>default: Ed25519<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>possible values: Ed25519, RSA2048, RSA3072, RSA4096,</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            NISTP256, NISTP384, NISTP521<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    -d, --dry-run</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            Dry run <span class=\"token punctuation\">(</span>does not save matched keys<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    -h, <span class=\"token parameter variable\">--help</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            Print <span class=\"token builtin class-name\">help</span> information</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    -j, <span class=\"token parameter variable\">--jobs</span> <span class=\"token operator\">&lt;</span>JOBS<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            Number of threads <span class=\"token punctuation\">[</span>default: <span class=\"token number\">8</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    -p, <span class=\"token parameter variable\">--pattern</span> <span class=\"token operator\">&lt;</span>PATTERN<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            Regex pattern <span class=\"token keyword\">for</span> matching fingerprints</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    -u, --user-id <span class=\"token operator\">&lt;</span>USER_ID<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            OpenPGP compatible user ID</pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    -v, <span class=\"token parameter variable\">--verbose</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            Verbose level</pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    -V, <span class=\"token parameter variable\">--version</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            Print version information</pre></td></tr></table></figure><p>示例写法</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vanity_gpg <span class=\"token parameter variable\">-c</span> Ed25519 <span class=\"token parameter variable\">-j8</span> <span class=\"token parameter variable\">-u</span> <span class=\"token string\">\"First Name &lt;user@xxx.com>\"</span> <span class=\"token parameter variable\">-p</span> <span class=\"token string\">\"9&#123;12&#125;$|E&#123;12&#125;$\"</span></pre></td></tr></table></figure><ul>\n<li>密钥的算法，可选的值有 Ed25519, RSA2048, RSA3072, RSA4096, NISTP256, NISTP384, NISTP52</li>\n<li>j8 代表使用 8 线程，根据算号机器的实际线程数调整</li>\n<li>算号匹配规则使用的正则表达式，示例是匹配密钥结尾是 12 个 9 或 12 个 E 的密钥</li>\n<li>其他信息按需修改即可，算号结果生成的密钥在当前登录用户的 Home 目录下</li>\n</ul>\n<h3 id=\"gpu-算号\"><a class=\"anchor\" href=\"#gpu-算号\">#</a> GPU 算号</h3>\n<p>GPU 算号相比 CPU 算号拥有更快的速度和效率，但是需要 nVidia 显卡和 CUDA 支持，GPU 算号的项目：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2N1aWhhb2xlby9ncGctZmluZ2VycHJpbnQtZmlsdGVyLWdwdQ==\">gpg-fingerprint-filter-gpu</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1ZpY3RyaWQvbWVtb3JhYmxlLXBncGdlbg==\">memorable-pgpgen</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2xhY2hlc2lzL3NjYWxsaW9u\">scallion</span></li>\n</ul>\n<p>推荐使用 gpg-fingerprint-filter-gpu 项目，这是使用 RTX3090 计算 Ed25519 类型的「靓号」的算力 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmRlamF2dS5tb2UvcG9zdHMvdGhlLXNjaWVudGlmaWMtdmFuaXR5LXBncC1jb3VudGluZy1ndWlkZS8jZm46Mg==\">2</span></p>\n<p><img data-src=\"https://blog.dejavu.moe/posts/the-scientific-vanity-pgp-counting-guide/3090.webp\" alt=\"3090 Calculation\" />3090 Calculation</p>\n<p>我当然知道你没有 3090 啦 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmRlamF2dS5tb2UvcG9zdHMvdGhlLXNjaWVudGlmaWMtdmFuaXR5LXBncC1jb3VudGluZy1ndWlkZS8jZm46Mw==\">3</span>，我们可以白嫖一些 GPU 云的免费额度，算个 12 位「靓号」绰绰有余了。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYXV0b2RsLmNvbS9yZWdpc3Rlcj9jb2RlPWVjMmM3OTdmLTFkNmItNDY5ZC04ODJkLWQ2ZTk2MWZiYTUzMg==\">AutoDL 算力云</span> 是国内一家良心的「炼丹云」，无需实名，新用户注册就有 10 元无门槛代金券。</p>\n<p>10 元不够用？少年，看看价格，要不然咱怎么说人家良心呢？</p>\n<p><img data-src=\"https://blog.dejavu.moe/posts/the-scientific-vanity-pgp-counting-guide/autodl.webp\" alt=\"AutoDL 算力云\" /> AutoDL 算力云</p>\n<p>如果你准备使用自己的 Linux 机器或是 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm52aWRpYS5jb20vY3VkYS93c2wtdXNlci1ndWlkZS9pbmRleC5odG1s\">WSL2</span>，请确保提前安装好 CUDA 驱动程序，像上面 GPU 云服务商提供的机器都是默认安装好 CUDA 驱动程序的。</p>\n<p>以 AutoDL 的 Ubuntu/CUDA 11.2 机器为例，SSH 登录服务器，准备程序需要的环境</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">apt</span> update <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> libgcrypt20-dev <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">git</span> clone https://github.com/cuihaoleo/gpg-fingerprint-filter-gpu <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">cd</span> gpg-fingerprint-filter-gpu <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">make</span></pre></td></tr></table></figure><p>以 Ed25519 类型的任意连续 12 位结尾 0-F 的密钥为例，开始算号</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./gpg-fingerprint-filter-gpu <span class=\"token parameter variable\">-a</span> ed25519 <span class=\"token parameter variable\">-t</span> <span class=\"token number\">31104400</span> <span class=\"token string\">'x&#123;12&#125;'</span> output.pgp</pre></td></tr></table></figure><p>算号程序每次算到匹配的密钥就会自动停止进程，你可以使用 Shell <span class=\"exturl\" data-url=\"aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NvbWljY2hhbmcvZ3BnLWZpbmdlcnByaW50LWZpbHRlci1ncHUvbWFzdGVyL2dlbmVyYXRlX2JhdGNoX2tleXMuc2g=\">脚本</span> 自动循环执行算号。这种方式算得的密钥都是空的 UID，导入的时候要带上允许空 UID 导入参数</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gpg --allow-non-selfsigned-uid <span class=\"token parameter variable\">--import</span> output.pgp</pre></td></tr></table></figure><blockquote>\n<p>你也可以考虑使用百度 AI Studio 的 GPU 算力，可以长期白嫖学习，参考 <span class=\"exturl\" data-url=\"aHR0cHM6Ly90ZWxlZ3JhLnBoL0JhaWR1LUZseWluZy1QdWxwLUFJLUxlYXJuaW5nLUNlbnRlci1QR1AtTnVtYmVyLUNvdW50aW5nLVR1dG9yaWFsLTEwLTE4\">使用百度飞浆 AI Studio 算 PGP 靓号教程</span>。</p>\n</blockquote>\n<p>后续编辑 Key 的时候要先新增 UID，再删除之前那个空的 UID 即可正常使用，具体可参考 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2N1aWhhb2xlby9ncGctZmluZ2VycHJpbnQtZmlsdGVyLWdwdSNpbXBvcnQta2V5\">项目文档 - 导入</span> 部分。</p>\n<h2 id=\"缝合密钥\"><a class=\"anchor\" href=\"#缝合密钥\">#</a> 缝合密钥</h2>\n<p>通过极高效率的 CPU/GPU 算号手段，现在的你已经拥有几枚至少 12 位的靓号了</p>\n<p><img data-src=\"https://blog.dejavu.moe/posts/the-scientific-vanity-pgp-counting-guide/vanity-pgp.webp\" alt=\"Vanity PGP\" />Vanity PGP</p>\n<p>对于大多数 PGP 人士来说，肯定是每个「靓号」不同的用途 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmRlamF2dS5tb2UvcG9zdHMvdGhlLXNjaWVudGlmaWMtdmFuaXR5LXBncC1jb3VudGluZy1ndWlkZS8jZm46NA==\">4</span> ，所以我们要「缝合」密钥。</p>\n<p>何谓「缝合」？像内娱的「音乐人」一样，我们也要做个裁缝。把几个「靓号」子密钥缝合到「靓号」主密钥上，最后我们得到的密钥对类似这样：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sec  ed25519/5266555555555555</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     created: <span class=\"token number\">2020</span>-12-14  expires: never       usage: SC</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     trust: ultimate      validity: ultimate</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ssb  ed25519/4399222222222222</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     created: <span class=\"token number\">2022</span>-09-14  expires: never       usage: S</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ssb  rsa4096/5151EEEEEEEEEEEE</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     created: <span class=\"token number\">2022</span>-10-13  expires: never       usage: E</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>ssb  ed25519/4578AAAAAAAAAAAA</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     created: <span class=\"token number\">2022</span>-04-12  expires: never       usage: A</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">[</span>ultimate<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>. Dejavu Moe <span class=\"token operator\">&lt;</span>xxx@xxx.com<span class=\"token operator\">></span></pre></td></tr></table></figure><p>准备缝合密钥之前，先把要缝的「靓号」密钥导入到现在的计算机，然后检查下导入的密钥</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gpg <span class=\"token parameter variable\">-k</span></pre></td></tr></table></figure><p>就像「爱情不是你想买就能买」，主密钥也不是你想设置哪个就用哪个。这些算号程序的本质就是修改密钥生成的时间戳，来获得新的随机密钥指纹，我们可以看到导入密钥的生成时间 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmRlamF2dS5tb2UvcG9zdHMvdGhlLXNjaWVudGlmaWMtdmFuaXR5LXBncC1jb3VudGluZy1ndWlkZS8jZm46NQ==\">5</span>。</p>\n<p><img data-src=\"https://blog.dejavu.moe/posts/the-scientific-vanity-pgp-counting-guide/import-keys.webp\" alt=\"import keys\" />import keys</p>\n<p>在缝合密钥的时候，有个大前提：主密钥的生成时间必须比子密钥要早 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmRlamF2dS5tb2UvcG9zdHMvdGhlLXNjaWVudGlmaWMtdmFuaXR5LXBncC1jb3VudGluZy1ndWlkZS8jZm46Ng==\">6</span>。因此对于上面的一组待缝合密钥，只有生成时间最早的那个「靓号」可以做为主密钥。</p>\n<h3 id=\"添加-uid\"><a class=\"anchor\" href=\"#添加-uid\">#</a> 添加 UID</h3>\n<p>GPU 算号程序生成的密钥都是空 UID，我们要生成一个新的 UID 并删除之前的空 UID</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gpg --edit-key A364444444444444\t<span class=\"token comment\"># 编辑主密钥</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>gpg <span class=\"token punctuation\">(</span>GnuPG<span class=\"token punctuation\">)</span> <span class=\"token number\">2.3</span>.7<span class=\"token punctuation\">;</span> Copyright <span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span> <span class=\"token number\">2021</span> Free Software Foundation, Inc.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>This is <span class=\"token function\">free</span> software: you are <span class=\"token function\">free</span> to change and redistribute it.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>There is NO WARRANTY, to the extent permitted by law.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Secret key is available.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>sec  ed25519/A364444444444444</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     created: <span class=\"token number\">2021</span>-10-04  expires: never       usage: SCA</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     trust: unknown       validity: unknown</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">[</span> unknown<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>. NONAME</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>gpg<span class=\"token operator\">></span> adduid\t<span class=\"token comment\"># 添加 UID</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Real name: Tony Tim\t<span class=\"token comment\"># 名称</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Email address: tony.tim@dejavu.moe\t<span class=\"token comment\">#邮箱</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Comment:</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>You selected this <span class=\"token environment constant\">USER</span>-ID:</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token string\">\"Tony Tim &lt;tony.tim@dejavu.moe>\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>Change <span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">)</span>ame, <span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span>omment, <span class=\"token punctuation\">(</span>E<span class=\"token punctuation\">)</span>mail or <span class=\"token punctuation\">(</span>O<span class=\"token punctuation\">)</span>kay/<span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">)</span>uit? Q</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>gpg<span class=\"token operator\">></span> uid <span class=\"token number\">1</span>\t<span class=\"token comment\"># 选择空的 UID</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>sec  ed25519/A364444444444444</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     created: <span class=\"token number\">2021</span>-10-04  expires: never       usage: SCA</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     trust: unknown       validity: unknown</pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">[</span> unknown<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>* NONAME</pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">[</span> unknown<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>. Tony Tim <span class=\"token operator\">&lt;</span>tony.tim@dejavu.moe<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>gpg<span class=\"token operator\">></span> deluid\t<span class=\"token comment\"># 删除空的 UID</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>Really remove this user ID? <span class=\"token punctuation\">(</span>y/N<span class=\"token punctuation\">)</span> y\t<span class=\"token comment\"># 确认删除</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>sec  ed25519/A364444444444444</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     created: <span class=\"token number\">2021</span>-10-04  expires: never       usage: SCA</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     trust: unknown       validity: unknown</pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">[</span> unknown<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>. Tony Tim <span class=\"token operator\">&lt;</span>tony.tim@dejavu.moe<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>gpg<span class=\"token operator\">></span>save\t<span class=\"token comment\"># 保存修改</span></pre></td></tr></table></figure><h3 id=\"查看时间戳\"><a class=\"anchor\" href=\"#查看时间戳\">#</a> 查看时间戳</h3>\n<p>即将缝合的子密钥 0xCF88999999999999，假设要给它的用途是 Sign (签名)，查看生成密钥的时间戳</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gpg <span class=\"token parameter variable\">-k</span> --with-colons</pre></td></tr></table></figure><p>图中框住的部分就是接下来需要的时间戳</p>\n<p><img data-src=\"https://blog.dejavu.moe/posts/the-scientific-vanity-pgp-counting-guide/timestamp.webp\" alt=\"PGP TimeStamp\" />PGP TimeStamp</p>\n<h3 id=\"查看-keygrip查看子密钥对应的-keygrip-并记录备用\"><a class=\"anchor\" href=\"#查看-keygrip查看子密钥对应的-keygrip-并记录备用\">#</a> 查看 Keygrip 查看子密钥对应的 Keygrip 并记录备用</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gpg <span class=\"token parameter variable\">-k</span> --with-keygrip</pre></td></tr></table></figure><h3 id=\"开始缝合\"><a class=\"anchor\" href=\"#开始缝合\">#</a> 开始缝合</h3>\n<h3 id=\"开始缝合子密钥到主密钥上编辑我们的主密钥\"><a class=\"anchor\" href=\"#开始缝合子密钥到主密钥上编辑我们的主密钥\">#</a> 开始缝合子密钥到主密钥上，编辑我们的主密钥</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gpg <span class=\"token parameter variable\">--expert</span> --faked-system-time<span class=\"token operator\">=</span><span class=\"token string\">\"[生成子密钥的时间戳]\\!\"</span> --ignore-time-conflict --edit-key <span class=\"token punctuation\">[</span>主密钥 KeyID<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>比如我用来演示的：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gpg <span class=\"token parameter variable\">--expert</span> --faked-system-time<span class=\"token operator\">=</span><span class=\"token string\">\"1642330159\\!\"</span> --ignore-time-conflict --edit-key A364444444444444</pre></td></tr></table></figure><p>缝合的最后步骤</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>gpg <span class=\"token parameter variable\">--expert</span> --faked-system-time<span class=\"token operator\">=</span><span class=\"token string\">\"1642330159\\!\"</span> --ignore-time-conflict --edit-key A364444444444444</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>gpg <span class=\"token punctuation\">(</span>GnuPG<span class=\"token punctuation\">)</span> <span class=\"token number\">2.3</span>.7<span class=\"token punctuation\">;</span> Copyright <span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">)</span> <span class=\"token number\">2021</span> Free Software Foundation, Inc.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>This is <span class=\"token function\">free</span> software: you are <span class=\"token function\">free</span> to change and redistribute it.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>There is NO WARRANTY, to the extent permitted by law.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>gpg: WARNING: running with faked system time: <span class=\"token number\">2022</span>-01-16 <span class=\"token number\">10</span>:49:19</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Secret key is available.</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>sec  ed25519/A364444444444444</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     created: <span class=\"token number\">2021</span>-10-04  expires: never       usage: SCA</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     trust: unknown       validity: unknown</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">[</span> unknown<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>. Tony Tim <span class=\"token operator\">&lt;</span>tony.tim@dejavu.moe<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>gpg<span class=\"token operator\">></span> addkey\t<span class=\"token comment\"># 添加子密钥</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Please <span class=\"token keyword\">select</span> what kind of key you want:</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> DSA <span class=\"token punctuation\">(</span>sign only<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> RSA <span class=\"token punctuation\">(</span>sign only<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> Elgamal <span class=\"token punctuation\">(</span>encrypt only<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> RSA <span class=\"token punctuation\">(</span>encrypt only<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span> DSA <span class=\"token punctuation\">(</span>set your own capabilities<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span> RSA <span class=\"token punctuation\">(</span>set your own capabilities<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> ECC <span class=\"token punctuation\">(</span>sign only<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> ECC <span class=\"token punctuation\">(</span>set your own capabilities<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span> ECC <span class=\"token punctuation\">(</span>encrypt only<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span> Existing key</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span> Existing key from card</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>Your selection? <span class=\"token number\">13</span>\t<span class=\"token comment\"># 选择从现有密钥中导入</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>Enter the keygrip: 9195F96C656FB6D919D42D8FAB1A27ACD8E2C0ED\t<span class=\"token comment\"># 子密钥对应的 Keygrip</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>Possible actions <span class=\"token keyword\">for</span> this ECC key: Sign Authenticate\t<span class=\"token comment\"># 子密钥可用的用途</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>Current allowed actions: Sign\t<span class=\"token comment\"># 子密钥现在的用途</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>   <span class=\"token punctuation\">(</span>S<span class=\"token punctuation\">)</span> Toggle the sign capability\t<span class=\"token comment\"># 切换签名用途</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   <span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span> Toggle the authenticate capability\t<span class=\"token comment\"># 切换认证用途</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   <span class=\"token punctuation\">(</span>Q<span class=\"token punctuation\">)</span> Finished</pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>Your selection? Q\t<span class=\"token comment\"># 完成</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>Please specify how long the key should be valid.\t<span class=\"token comment\"># 选择过期时间</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>         <span class=\"token number\">0</span> <span class=\"token operator\">=</span> key does not expire</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      <span class=\"token operator\">&lt;</span>n<span class=\"token operator\">></span>  <span class=\"token operator\">=</span> key expires <span class=\"token keyword\">in</span> n days</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token operator\">&lt;</span>n<span class=\"token operator\">></span>w <span class=\"token operator\">=</span> key expires <span class=\"token keyword\">in</span> n weeks</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token operator\">&lt;</span>n<span class=\"token operator\">></span>m <span class=\"token operator\">=</span> key expires <span class=\"token keyword\">in</span> n months</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      <span class=\"token operator\">&lt;</span>n<span class=\"token operator\">></span>y <span class=\"token operator\">=</span> key expires <span class=\"token keyword\">in</span> n years</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>Key is valid for? <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>Key does not expire at all</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>Is this correct? <span class=\"token punctuation\">(</span>y/N<span class=\"token punctuation\">)</span> y</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>Really create? <span class=\"token punctuation\">(</span>y/N<span class=\"token punctuation\">)</span> y</pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>sec  ed25519/A364444444444444</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>     created: <span class=\"token number\">2021</span>-10-04  expires: never       usage: SCA</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>     trust: unknown       validity: unknown</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>ssb  ed25519/CF88999999999999</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>     created: <span class=\"token number\">2022</span>-01-16  expires: never       usage: S</pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">[</span> unknown<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>. Tony Tim <span class=\"token operator\">&lt;</span>tony.tim@dejavu.moe<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>gpg<span class=\"token operator\">></span> save\t<span class=\"token comment\"># 保存</span></pre></td></tr></table></figure><p>现在我们的第一个用途为 Sign (签名) 的子密钥就缝合到主密钥上了，可以按照上面的步骤继续「缝合」其他用途的子密钥。</p>\n<p>现在，少年！请带上你的 PGP 靓号去尽情冲 (zhuang) 浪 (bi) 吧！</p>\n<p><strong>参考资料</strong></p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWN1cml0eS5zdGFja2V4Y2hhbmdlLmNvbS9xdWVzdGlvbnMvMzI5MzUvbWlncmF0aW5nLWdwZy1tYXN0ZXIta2V5cy1hcy1zdWJrZXlzLXRvLW5ldy1tYXN0ZXIta2V5LzE2MDg0NyMxNjA4NDc=\">Migrating GPG master keys as subkeys to new master key - Information Security Stack Exchange</span></li>\n</ul>\n<hr />\n<ol>\n<li>在 Windows 上没测试，但是用 WSL2 算号应该也是极好的</li>\n<li>是的，你没看多，算力超过百亿 10,200,000,000 hash/s</li>\n<li>常见的显卡，比如 1050Ti、1060、2060、3060 速度都比纯 CPU 算号的要快得多</li>\n<li>如果你在上面算的「靓号」无法更改密钥用途（change-usage），请删除现在的 UID，新建一个即可</li>\n<li>所以生成「靓号」的密钥可能生成时间是几年前或者几个月前都是正常的，比如某群友算出个生成时间是 2013 年的密钥</li>\n<li>要不然后面「缝合」后的密钥会出现问题</li>\n</ol>\n",
            "tags": [
                "PGP"
            ]
        },
        {
            "id": "https://sakurame.eu.org/2023/06/09/privacy/PGP%E7%9A%84%E9%97%AE%E9%A2%98/",
            "url": "https://sakurame.eu.org/2023/06/09/privacy/PGP%E7%9A%84%E9%97%AE%E9%A2%98/",
            "title": "PGP的问题",
            "date_published": "2023-06-09T07:21:27.000Z",
            "content_html": "<h1 id=\"译pgp的问题\"><a class=\"anchor\" href=\"#译pgp的问题\">#</a> 「译」PGP 的问题</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sYXRhY29yYS5taWNyby5ibG9nLzIwMTkvMDcvMTYvdGhlLXBncC1wcm9ibGVtLmh0bWw=\">原文链接</span> ，原作者为 Latacora，一个国外安全团队。</p>\n<p>几十年来（一点不夸张地），<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNyeXB0b2dyYXBoeWVuZ2luZWVyaW5nLmNvbS8yMDE0LzA4LzEzL3doYXRzLW1hdHRlci13aXRoLXBncC8=\">密码学工程师们一直为 PGG 的缺陷 </span>  困扰得拽头发。</p>\n<p>当其他领域的工程师得知这个消息时，他们会感到震惊 。啥？ PGP 不行？那为啥人们总是告诉我用 PGP?</p>\n<p>答案是他们不应该告诉你， 因为 PGP 就是不行， 需要被淘汰。</p>\n<p>正如你将要看到的，PGP 有非常多的问题。</p>\n<p>幸运的是， 如果你并不是病态地好奇， 它有一个简单的元问题：它是 20 世纪 90 年代设计的，在严肃的现代密码学诞生之前。</p>\n<p>（如今）没有一个合格的密码工程师会设计一个像今天的 PGP 一样的系统， 也不会容忍它在其他设计中的大部分缺陷。</p>\n<p>严肃的密码学家们在很大程度上已经放弃了 PGP， 并不再花时间为它发表论文 (<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudXNlbml4Lm9yZy9zeXN0ZW0vZmlsZXMvY29uZmVyZW5jZS91c2VuaXhzZWN1cml0eTE4L3NlYzE4LXBvZGRlYm5pYWsucGRm\">有一个明显的例外</span>)。</p>\n<p>由于这个原因，PGP 中被充分理解的问题已经有十多年没有得到解决了。</p>\n<p>有两点要注意:： 第一，  我们这篇文章是为工程师写的， 不是为律师和活动家写的。</p>\n<p>第二， “PGP “可以指一堆东西，从 OpenPGP 标准到 GnuPG 的参考实现。<strong>我们用 “PGP “这个词来涵盖所有这些东西</strong>。</p>\n<h2 id=\"问题\"><a class=\"anchor\" href=\"#问题\">#</a> 问题</h2>\n<h3 id=\"荒谬的复杂性\"><a class=\"anchor\" href=\"#荒谬的复杂性\">#</a> 荒谬的复杂性</h3>\n<p>由于一些我们这些未来人都不理解的原因，  PGP 有一个基于数据包的结构。</p>\n<p>PGP 信息（包含在 “.asc” 文件中）是类型化数据包的存档。 根据您使用的是 “新” 还是 “旧” 格式的数据包，<span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzQ4ODAjcGFnZS0xMw==\">至少有 8 种不同的方法</span>可以对数据包的长度进行编码。</p>\n<p>新格式的数据包长度是可变的，如 BER（尝试编写 PGP 实现，您可能会希望 ASN.1 的 sweet release）。包可以有子包。某些数据包有重叠的变体。</p>\n<p>最近发生的公钥服务器攻击是因为 GnuPG 在解析密钥时<span class=\"exturl\" data-url=\"aHR0cHM6Ly90aHJlYWRyZWFkZXJhcHAuY29tL3RocmVhZC8xMTQ3MTYyNTgzOTY5MDA5NjY0Lmh0bWw=\">意外出现指数级增长</span>，这也是遵循这种发癫的格式。</p>\n<p>以上只是编码的问题。</p>\n<p>实际用起来的时候，系统并不会更简单： 有主密钥和子密钥，密钥 ID、公钥服务器和密钥签名，只有签名的和只有加密的，多个 “密钥环”，撤销证书，三种不同的压缩格式。</p>\n<p>这些还都是在我们谈到智能卡支持之前。</p>\n<h3 id=\"瑞士军刀式的设计\"><a class=\"anchor\" href=\"#瑞士军刀式的设计\">#</a> 瑞士军刀式的设计</h3>\n<p>如果你被困在森林里里，我不清楚，需要修理你的牛仔裤袖口，如果你的多功能刀有一把剪刀，那就很方便了。但是，没有一个做正经工作的人经常使用他们的多功能刀的剪刀。</p>\n<p>一把瑞士军刀能做一堆事情，但都做得很差：</p>\n<ul>\n<li>PGP 在签名方面做得很平庸</li>\n<li>在用密码加密方面做得相对较差</li>\n<li>在用公钥加密方面做得相当糟糕</li>\n<li>PGP 并不是一个安全传输文件的好方</li>\n<li>它是一个笨拙的签名包的方式</li>\n<li>它在保护备份方面不是很好</li>\n<li>它是一种完全危险的安全信息交流方式</li>\n</ul>\n<p>回到 PGP 起源的 MC Hammer 时代，“加密” 只是 “一件” 特殊的事： 有一个工具用来（单纯地）发送文件，或只是备份一个目录，又用另外的工具来加密和签名文件。</p>\n<p>而现代密码学不是这样运行的， （不同加密算法）有其专门的目的。 例如，安全地传递消息也需要加密，一种不同于安全备份或包签名的加密。</p>\n<h3 id=\"陷入兼容旧版的泥潭\"><a class=\"anchor\" href=\"#陷入兼容旧版的泥潭\">#</a> 陷入兼容旧版的泥潭</h3>\n<p>PGP 早于现代密码学；比 Hanson 的专辑还要久远的年代。</p>\n<p>如果幸运的话，您的本地 GnuPG 默认为 2048 位 RSA、CFB 中的 64 位块 CAST5 密码和 OpenPGP MDC 校验和（稍后会详细介绍）。</p>\n<p>如果您使用密码而不是公钥进行加密，OpenPGP 协议会指定了 PGP 的 S2K 密码 KDF。委婉地说，这些不是密码工程师为现代系统选择的原语。</p>\n<p>自从 Steve Urkel 在 ABC 的 TGIF 节目中出现以来，我们学到了很多：</p>\n<ul>\n<li>你应该验证你的密文（并避免 CFB 模式）将是一个明显的例子。</li>\n<li>64 位分组密码并不好，我们可以做很多比 RSA 更好的事。</li>\n<li>混合压缩和加密是危险的，而且 KDF 应该是时间和内存困难的。</li>\n</ul>\n<p>无论 OpenPGP RFC 怎么说，如果您使用 PGP，您可能不会做任何这些事情，也无法预测何时会做。</p>\n<p>以 AEAD 密码为例：Rust 语言的 Sequoia PGP 默认为 AES-EAX AEAD 模式，这很好，没有人可以阅读这些消息。 而因为大多数 PGP 安装者并不知道 EAX 模式是什么，这就不太好了。</p>\n<p>每个众所周知的坏密码系统最终都会产生一个支持曲线或 AEAD 的 RFC 扩展，以便其支持者可以在留言板上声称他们支持现代密码学。</p>\n<p>RFC 无关紧要：只有安装 PGP 的这些基本盘才重要。</p>\n<p>我们已经搞了认证加密这一套 20 年了，PGP 已经足够成熟了，它都能自己去超市给我买酒了。（抱歉</p>\n<p>您可以选择兼容 1990 年代的旧版本，也可以选择拥有健全的密码学。 <strong>但你并不能同时拥有</strong>。</p>\n<h3 id=\"令人讨厌的用户体验\"><a class=\"anchor\" href=\"#令人讨厌的用户体验\">#</a> 令人讨厌的用户体验</h3>\n<p>我们不能说得比 Ted Unangst 更好了：</p>\n<blockquote>\n<p>几年前进行了一项 PGP 可用性研究，其中一组技术人员被安置在一个有计算机的房间里，并要求设置 PGP。 两个小时后，这些人没了，消失了，杳无音讯</p>\n</blockquote>\n<p>如果您想要自己的经验数据来支持这一点，您可以进行以下实验：</p>\n<ol>\n<li>找到一位移民律师，并与他们讨论让 Signal 在他们的手机上工作的过程</li>\n<li>你可能不会马上体验到它的美味</li>\n<li>现在尝试（把 Signal 换成） PGP 来做这件事</li>\n</ol>\n<h3 id=\"长期的密钥\"><a class=\"anchor\" href=\"#长期的密钥\">#</a> 长期的密钥</h3>\n<p>PGP 请求用户保留与他们的身份相关联的几乎永久的根密钥。</p>\n<p>它通过使 密钥生成和交换变得烦人、“密钥签署 Party” , 以及创建一个 “信任网”（Web Of Trust）, 使密钥依赖于其他密钥 ，来做到这一点。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93b3Jkcy5maWxpcHBvLmlvL2dpdmluZy11cC1vbi1sb25nLXRlcm0tcGdwLw==\">长期密钥几乎从来都不是您想要的</span>。如果您持续地使用密钥，它最终都会泄漏。</p>\n<p>您希望妥协的爆炸半径尽可能小，而且同样重要的是，你不希望用户在对他们目前的密钥的安全有任何担心的情况下，对启用新密钥的想法有任何犹豫。</p>\n<p>PGP 氛围组马上就会回复：</p>\n<blockquote>\n<p>“这就是为什么你要把密钥放在 Yubikey 里～”</p>\n</blockquote>\n<p>大致上来说，全世界没有人使用昂贵的 Yubikey 来做这个，而且你也别期待未来会发生。 （我们连 U2F 的推广都进行不动，而且这些密钥是一次性的）。</p>\n<p>我们不能仅仅为了让 Unix 书呆子对他们的玩具感觉更好，而接受糟糕的密码系统。</p>\n<h3 id=\"身份验证的崩溃\"><a class=\"anchor\" href=\"#身份验证的崩溃\">#</a> 身份验证的崩溃</h3>\n<p>更多关于 PGP 的古老原语：早在 2000 年，OpenPGP 工作组就意识到他们需要对密文进行身份验证，而 PGP 的签名并没有做到这一点。</p>\n<p>因此 OpenPGP 发明了 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmZjLWVkaXRvci5vcmcvcmZjL3JmYzQ4ODAjc2VjdGlvbi01LjE0\">MDC 系统</span>：带有 MDC 的 PGP 消息将明文的 SHA-1 附加到明文，然后在 CFB 模式下加密（跟平常那样）。</p>\n<p>如果您想知道当现代系统使用相对复杂的 AEAD 模式时 PGP 如何解决这个问题（为什么每个人都不能将 SHA-1 添加到他们的明文中），您并不孤单。</p>\n<p>从哪里开始使用这个 Rube Goldberg 装置呢？PGP MDC 可以被剥离消息 —— 它的编码方式是你可以简单地截掉密文的最后 22 个字节来做到这一点。</p>\n<p>为了保持与不安全的旧信息的兼容性，PGP 引入了一种新的数据包类型来表示需要验证 MDC；如果您使用了错误的类型，则不会检查 MDC。</p>\n<p>即使您这样做了，新的 SEIP 数据包格式也与不安全的 SE 格式非常接近，可能会诱使读取方降级；<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tYWlsYXJjaGl2ZS5pZXRmLm9yZy9hcmNoL21zZy9vcGVucGdwL3RCMDB2TzVyLXFuZVg5d3oxeHozbmV0cFhWVS8=\">Trevor Perrin 将 SEIP 设计为 16 个完整的安全位</span>。</p>\n<p>最后，即使一切顺利，Reference 的 PGP 实现也会（等待它）向调用者发送未经身份验证的明文，<em>即使 MDC 不匹配</em>。</p>\n<h3 id=\"不连贯的身份\"><a class=\"anchor\" href=\"#不连贯的身份\">#</a> 不连贯的身份</h3>\n<p>PGP 是一个应用程序 它是与其他应用程序的一组集成 它是一种文件格式 它也是一个社交网络 也是一种亚文化。</p>\n<p>PGP 推动了加密身份的概念：</p>\n<ul>\n<li>您生成一个密钥，将其保存在您的密钥环中，在您的名片上打印其指纹，然后将其发布到密钥服务器。</li>\n<li>你在别人的密钥上签名。</li>\n<li>他们反过来可能会也可能不会依赖您的签名来验证其他密钥。</li>\n<li>有些人会特意亲自与其他 PGP 用户会面，以交换密钥并更安全地连接到这个 “信任网络”。</li>\n<li>还有一些人会组织 “密钥签署 Party”。</li>\n</ul>\n<p>您现在在脑海中勾勒出的图像准确地解释了 PGP 的拥护者们切换到更新的东西有多难。</p>\n<p>不过这种黏在一起的身份没啥用。</p>\n<p>普通人会相信任何看起来像 PGP 密钥的东西，而不是密钥签名信任网络，不是密钥服务器，不是那些 Party ，无论它来自哪儿 —— 他们怎么可能不信？ 即使是专家也很难阐明如何评估密钥。</p>\n<p>专家不信任他们没有亲自交换过的密钥。其他所有的人都依赖一个中心化的机构来分发密钥。 PGP 的密钥分发机制是场闹剧。</p>\n<h3 id=\"泄露元数据\"><a class=\"anchor\" href=\"#泄露元数据\">#</a> 泄露元数据</h3>\n<p>先不说电子邮件的问题 (我们稍后会说到)， PGP 本身就泄露了元数据。</p>\n<p>信息 (在正常使用情况下) 直接与密钥标识符相连，而密钥标识符在整个 PGP 的信任网中与用户身份相连。</p>\n<p>此外，很大一部分 PGP 用户使用密钥服务器，这些密钥服务器本身也会向网络泄露哪些 PGP 用户正在相互通信的身份。</p>\n<h3 id=\"无前向保密性\"><a class=\"anchor\" href=\"#无前向保密性\">#</a> 无前向保密性</h3>\n<p>PGP 的最后一个问题，有一个很好的例子：安全消息传递加密要求前向保密。</p>\n<p>前向保密意味着，如果你今天向攻击者 “Say Hi”，并丢了一只密钥，他们仍然不能去阅读到昨天的消息；他们必须在昨天带着密钥在那里才能阅读它们。</p>\n<p>在现代密码学工程中，我们假设我们的对手正在将所有内容记录到无限存储中。PGP 声称的对手包括世界各国政府，其中许多政府确实在这样做。针对强大的对手并且没有前向保密，被破解是 “何时” 的问题，而不是 “如果” 的问题。</p>\n<p>为了在实践中实现保密，您通常会保留两个密钥：一个短期会话密钥和一个长期可信密钥。 会话密钥是临时的（通常是 DH 交换的产物）并且受信任的密钥对其进行签名，因此中间人无法交换自己的密钥。</p>\n<p>理论上，使用 PGP 提供的工具可以实现前向保密的雏形。当然，几乎没有人这样做。</p>\n<h3 id=\"笨拙的密钥\"><a class=\"anchor\" href=\"#笨拙的密钥\">#</a> 笨拙的密钥</h3>\n<p>OpenBSD 的  <code>signify(1)</code>  公钥是一个 Base64 字符串，短到可以放在电子邮件的句子中间；如果是私钥，不是交换格式，只比公钥长了一行左右。</p>\n<p>PGP 公钥是一个巨大的 Base64 文档；如果您经常使用它们，那么您可能已经习惯于将它们添加到附件，而不是将它们粘贴到消息中，这样它们就不会被损坏。</p>\n<p>Signify 的密钥是最先进的 Ed25519 密钥；PGP 是较弱的 RSA 密钥。</p>\n<p>您可能认为这些东西无关紧要，但它很重要；使用 SSH 和管理 SSH 密钥的人比使用 PGP 的人多几个数量级。SSH 密钥处理起来很简单，而 PGP 不是。</p>\n<h3 id=\"协商\"><a class=\"anchor\" href=\"#协商\">#</a> 协商</h3>\n<p>PGP 支持 ElGamal。PGP 支持 RSA。PGP 支持 NIST P 曲线。PGP 支持 Brainpool。PGP 支持  Curve25519。PGP 支持 SHA-1。PGP 支持 SHA-2。PGP 支持 RIPEMD160。PGP 支持 IDEA。PGP 支持 3DES。PGP 支持 CAST5。PGP 支持 AES。这不可能是 PGP 支持的完整列表。</p>\n<p>如果我们在过去 20 年中学到了关于密码学设计的 3 件重要的事情，其中至少 2 件是<strong>协商和兼容性是恶魔</strong>。密码系统中的缺陷往往出现在细枝末节中，而不是主干上，而广泛的密码兼容性增加了细节的数量。</p>\n<p>像 TLS 1.3 这样的现代协议正在抛弃与 RSA 等东西的兼容性，而不是添加它。新系统只支持一套原语 和一个简单的版本号。如果这些原语之一失败，您会立即更改版本并放弃旧协议。</p>\n<p>如果我们不走运，20 年后人们仍在使用 PGP，那么 PGP 将是任何地方的任何代码会包含 CAST5 的唯一原因。</p>\n<p>我们不能说得再清楚或者再啰嗦了：您可以选择兼容 1990 年代的旧版本，也可以选择拥有健全的密码学。 <strong>但你并不能同时拥有</strong>。</p>\n<h3 id=\"简陋的代码\"><a class=\"anchor\" href=\"#简陋的代码\">#</a> 简陋的代码</h3>\n<p>PGP 的实际标准实现是 GnuPG。GnuPG 不是精心构建的。</p>\n<p>这是一个庞大的 C 语言代码库，具有重复的功能（例如，最近的 SKS 密钥解析 DoS 的记录指出它有多个密钥解析器）具有从内存损坏 到加密侧信道的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY3ZlZGV0YWlscy5jb20vdnVsbmVyYWJpbGl0eS1saXN0L3ZlbmRvcl9pZC00NzExL0dudXBnLmh0bWw=\">CVE 的长期跟踪记录</span>。</p>\n<p>有时可以在 GnuPG 不注意的情况下将身份验证器从消息中剥离。有可能在它没有注意到的情况下向它提供没有正确指纹的密钥。2018 Efail 漏洞是因为它向调用者发布未经身份验证的明文。</p>\n<p>GnuPG 就是不行。</p>\n<p>GnuPG 也是 PGP 的有效参考实现，也是集成 PGP 加密的大多数其他工具的基础。 它哪儿也不会去，依赖 PGP 就是依赖 GPG。</p>\n<h2 id=\"答案\"><a class=\"anchor\" href=\"#答案\">#</a> 答案</h2>\n<p>说服人们停止使用 PGP 的挑战之一是没有一种东西可以取代它，也不应该有。</p>\n<p>你应该用什么来取代它，取决于你要做什么。</p>\n<h3 id=\"与人交流\"><a class=\"anchor\" href=\"#与人交流\">#</a> 与人交流</h3>\n<blockquote>\n<p>译注： 我不太认同作者这部分的观点，Signal 并不是什么更好的选择（WhatsApp 更不是 。 首先你能期待一个必须要手机号才能使用的软件给你什么安全？ （cue 一下 Telegram  。<br />\n更多不推荐的理由，可以参考 sourcehut 创始人 Drew DeVault 的文章 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kcmV3ZGV2YXVsdC5jb20vMjAxOC8wOC8wOC9TaWduYWwuaHRtbA==\">I don’t trust Signal</span></p>\n</blockquote>\n<p>使用 Signal。或者 Wire，或者 WhatsApp，或者其他基于 Signal 协议的安全通信软件。</p>\n<p>现代安全即时通讯是围绕着信息传递而建立的。它们使用保护隐私的认证握手、可拒绝的信息、在每个信息交换中重新加密的加密棘轮，当然还有现代的加密原语。</p>\n<p>即时通讯软件的使用非常简单，而且不需要为密钥和子密钥而大费周章。</p>\n<p>如果你使用 Signal，你会得到更多：你会得到一个对将私人元数据保存在服务器上如此偏执的系统，它对 Giphy 搜索进行隧道化处理以避免流量分析攻击，而且直到最近还不支持用户配置文件。</p>\n<h3 id=\"加密电子邮件\"><a class=\"anchor\" href=\"#加密电子邮件\">#</a> 加密电子邮件</h3>\n<p>不。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9uZXdzLnljb21iaW5hdG9yLmNvbS9pdGVtP2lkPTE2MDg4Mzg2\">电子邮件不安全</span>。即使使用  PGP，它也是默认明文，这意味着即使您做对了所有事情，您邮寄的某个完全可信的人，做完全合理的事情，总是会将您加密消息的引用明文抄送给其他人（我们不知道没有看到这种情况发生的 PGP 电子邮件用户）。PGP 电子邮件是转发不安全的。包括主题（字面意思是消息内容）在内的电子邮件元数据始终是纯文本的。</p>\n<p>如果您需要其他理由，<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudXNlbml4Lm9yZy9zeXN0ZW0vZmlsZXMvY29uZmVyZW5jZS91c2VuaXhzZWN1cml0eTE4L3NlYzE4LXBvZGRlYm5pYWsucGRm\">请阅读 Efail 论文</span>。<span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTgxMjI1MjE0NzMwL2h0dHBzOi8vZmxha2VkLnNvY2twdXBwZXQub3JnLzIwMTgvMDUvMTYvYS11bmlmaWVkLXRpbWVsaW5lLmh0bWw=\">对 Efail 的披露处理不当</span>的 GnuPG 社区对这项研究进行了大量讨论，但它被 Usenix Security（顶级学术软件安全活动之一）和 Black Hat USA（顶级行业软件安全活动）承认，是过去 5 年中最好的加密攻击之一，是对 PGP 生态系统的毁灭性指控。 正如您将从论文中看到的那样，S/MIME 并不好。</p>\n<p>这不可能被修复。要制作真正安全的电子邮件，你必须在电子邮件上建立另一种协议的隧道  （您仍然会承受流量分析攻击）。都这样了，又何必去伪装呢？</p>\n<p>加密电子邮件是自寻祸患。</p>\n<p>向有风险的用户推荐电子邮件加密是一种不当行为。 任何告诉您通过 PGP 加密的电子邮件进行通信是安全的人都将他们奇怪的偏好置于您的安全之上。</p>\n<h3 id=\"发送文件\"><a class=\"anchor\" href=\"#发送文件\">#</a> 发送文件</h3>\n<p>使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21hZ2ljLXdvcm1ob2xlL21hZ2ljLXdvcm1ob2xl\"> Magic Wormhole</span>。</p>\n<p>虫洞客户端使用一次性密码验证密钥交换 (PAKE) 将文件加密给收件人。</p>\n<p>这很容易（至少对于 Nerd 们来说）、安全且有趣：我们还没有把虫洞介绍过给任何没有像我们一样立即开始欣喜地使用虫洞的人。</p>\n<p>有人马上发布了 Go 或 Rust 实现的 Magic Wormhole 的 Windows 安装程序， 它太棒了，我不允许还有人没装！</p>\n<p>如果您与律师而不是与技术人员合作，Signal 在保护文件传输方面做得非常好。 在您的安全页面上放置一个 Signal 账户以接收错误赏金报告，而不是 PGP 密钥。</p>\n<blockquote>\n<p>译注，Magic Wormhole 是一个命令行的文件传输工具。 推荐一个 web 版的，更易用一些的文件传输工具，名字也很像，叫 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93b3JtaG9sZS5hcHAv\">Wormhole</span>，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1NvY2tldERldi93b3JtaG9sZS1jcnlwdG8=\">源码</span></p>\n</blockquote>\n<h3 id=\"加密备份\"><a class=\"anchor\" href=\"#加密备份\">#</a> 加密备份</h3>\n<p>使用 Tarsnap。<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudGFyc25hcC5jb20vZGVzaWduLmh0bWw=\">Colin 可以告诉您有关 Tarsnap 如何优化以保护备份的所有信息</span>。 或者说真的，使用许多其他人使用的任何其他加密备份工具； 它们不会像 Tarsnap 那样棒，但它们肯定都会比 PGP 做得更好。</p>\n<p>需要离线备份？使用加密的磁盘 image；它们内置于现代 Windows、Linux 和 macOS 中。 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb2NrcHVwcGV0Lm9yZy9ibG9nLzIwMTQvMDQvMzAveW91LWRvbnQtd2FudC14dHMv\">全盘加密不是很好</span>，但它适用于这个用例，而且比 PGP 更容易、更安全。</p>\n<h3 id=\"签署包\"><a class=\"anchor\" href=\"#签署包\">#</a> 签署包</h3>\n<p>使用 Signify/Minisign。<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3BlbmJzZC5vcmcvcGFwZXJzL2JzZGNhbi1zaWduaWZ5Lmh0bWw=\">ed Unangst 会告诉你一切</span>。</p>\n<p>这是 OpenBSD 用来对包进行签名的东西。它非常简单并使用现代签名。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qZWRpc2N0MS5naXRodWIuaW8vbWluaXNpZ24v\">Minisign</span> ，ibsodium 的专家 Frank Denis 写的 ，为 Windows 和 macOS 带来了相同的设计；Go、Rust、Python、Javascript 和 .NET 都有相关的包；它甚至与 Signify 兼容。</p>\n<h3 id=\"加密app的数据\"><a class=\"anchor\" href=\"#加密app的数据\">#</a> 加密 App 的数据</h3>\n<p>用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2plZGlzY3QxL2xpYnNvZGl1bQ==\"> libsodium</span>。</p>\n<p>它可以在任何地方构建，具有设计为难以误用的界面，并且您不必掏出一个二进制文件来使用它。</p>\n<h3 id=\"加密文件\"><a class=\"anchor\" href=\"#加密文件\">#</a> 加密文件</h3>\n<p>这确实是个问题。</p>\n<p>如果你<strong>不是</strong>在做备份，也<strong>不是</strong>在为长期存储而离线存档，也<strong>不是</strong>为了安全地将文件发送给别人而加密，也<strong>不是</strong>为了完成工作而挂载 / 卸载的虚拟驱动器。</p>\n<p>那么现在没有一个好的工具可以做到这一点。Filippo Valsorda 正在研究这些用例的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vZG9jdW1lbnQvZC8xMXlIb20yMENyc3VYOEtRSlhCQncwNHM4MFVuanY4ekNnX0E3c1BBWF85WS92aWV3\"> Age</span>，我对此非常乐观，但它还没有完成。</p>\n<p><em>更新，2020 年 2 月</em></p>\n<p>Filippo 的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hZ2UtZW5jcnlwdGlvbi5vcmc=\"> age</span> 已经公布。 这是一个可靠的设计，在 Go 和 Rust 中具有简单、易于审计的实现。</p>\n<p>您可以为每个主流平台构建二进制文件。</p>\n<p>age 当然比 PGP 年轻得多。但我会用我口袋里的所有钱来和你所有的钱打赌，在 Age 发现新的漏洞之前，PGP 这个庞然大物就会被发现（新的漏洞）。看 age 的了！</p>\n<p>希望大家能明白这是一个相当狭隘的用例。 我们从事软件安全工作并处理敏感数据，包括 Bug Bounty 报告（另一个超级常见的 “我们需要 PGP！” 用例），但我们几乎永远都不用碰 PGP！</p>\n<h2 id=\"译后注\"><a class=\"anchor\" href=\"#译后注\">#</a> 译后注</h2>\n<p>在今天，PGP 俨然已经成为一种亚文化，很多独立博客作者，安全研究员，键政人都愿意在自己的个人资料里附上自己的 PGP 指纹。</p>\n<p>它作为密码学的象征， 对于开源和自由运动与集权抗争的象征意义，已经大于它的实际作用。</p>\n<p>复杂的用法并不会减损它的魅力，忽视诸多安全问题而给人虚假的安全感才是最致命的。（<s>虽然 99% 的人只是用来装逼，不会也找不到人去用</s></p>\n<p>我的建议就是，咱继续用它装逼就好，如果做高风险的事还是别用它了😂</p>\n<p>像原作者说的那样，用专业的工具去做专业的事。</p>\n<p>前面说过我并不推荐作者强推的 Signal，并给出了一些理由。那我们应该用什么呢？</p>\n<p>一个很好的替代品是<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tYXRyaXgub3JnLw==\"> Matrix</span>，一个「去中心化」的「端到端加密」的即时通讯软件。</p>\n<p>「去中心化」意味着很难被墙，「端到端加密」意味着安全。</p>\n<p>想必你也不会想去教八十岁的奶奶使用 OMEMO XMPP，或者给朋友推荐一圈某 T 字头全宇宙最好的聊天软体结果因为需要翻墙没人愿意折腾，最后就自己和自己安全地聊天吧。</p>\n<p>如果你也不想妥协继续使用微信，用 Matrix！</p>\n",
            "tags": [
                "PGP"
            ]
        }
    ]
}