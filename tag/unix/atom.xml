<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://sakurame.eu.org</id>
    <title>Sakura • Posts by &#34;unix&#34; tag</title>
    <link href="https://sakurame.eu.org" />
    <updated>2023-04-28T13:55:13.000Z</updated>
    <category term="张量可视化" />
    <category term="Hyperstreamline" />
    <category term="Unix" />
    <category term="连通性分析" />
    <category term="油藏工程" />
    <category term="人工智能" />
    <category term="深度学习" />
    <category term="雅思" />
    <category term="建站" />
    <category term="翻译" />
    <category term="PMBOK" />
    <category term="图形学" />
    <category term="游戏引擎" />
    <category term="PBRT" />
    <category term="隐私" />
    <category term="PGP" />
    <category term="Secure Boot" />
    <category term="随笔" />
    <category term="感悟" />
    <category term="总结" />
    <category term="思辨" />
    <category term="PT" />
    <category term="板砖美学" />
    <category term="压制技术" />
    <category term="视频压制技术系列教程" />
    <entry>
        <id>https://sakurame.eu.org/2023/04/28/basic-theory/UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%EF%BC%9A%E9%80%9A%E4%BF%A1%EF%BC%8C%E5%B9%B6%E5%8F%91%E5%92%8C%E7%BA%BF%E7%A8%8B/</id>
        <title>UNIX系统编程：通信，并发和线程</title>
        <link rel="alternate" href="https://sakurame.eu.org/2023/04/28/basic-theory/UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%EF%BC%9A%E9%80%9A%E4%BF%A1%EF%BC%8C%E5%B9%B6%E5%8F%91%E5%92%8C%E7%BA%BF%E7%A8%8B/"/>
        <content type="html">&lt;h1 id=&#34;第一部分-基础知识&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第一部分-基础知识&#34;&gt;#&lt;/a&gt; 第一部分   基础知识&lt;/h1&gt;
&lt;h2 id=&#34;第一章-技术对程序的影响&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#第一章-技术对程序的影响&#34;&gt;#&lt;/a&gt; 第一章 技术对程序的影响&lt;/h2&gt;
&lt;h3 id=&#34;术语的变化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#术语的变化&#34;&gt;#&lt;/a&gt; 术语的变化&lt;/h3&gt;
&lt;p&gt;异步操作（Asynchronous Operation）产生的原因是很多计算机系统事件会在不可预测的时间，以不可预测的顺序发生。因此，必须在所有可能的时序下都正确运行的程序才是正确的。不幸的是，时序错误通常很难重现，程序每运行 100 万次，可能才会出现一次。&lt;/p&gt;
&lt;p&gt;并发（Concurrency）是同一时间帧中的资源共享。现在操作系统的一个主要任务是管理计算机系统和在系统上运行的应用程序的并发操作。但是，并发控制也已经成为应用程序的一个组成部分。并发和异步操作具有同样的问题 ------- 它们引发的 BUG 通常很难复现，并且会产生难以预测的副作用。&lt;/p&gt;
&lt;p&gt;通信（Communication）是一个实体将信息传递给另一个实体的过程。由于网络和网络应用的主导地位，应用程序不仅要处理本地设备（诸如磁盘）的 IO，还必须处理网络的 IO。网络通信引入的问题也是由于不可预测的时序和可能未检测到的远程故障造成的。&lt;/p&gt;
&lt;h3 id=&#34;时间和速度&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#时间和速度&#34;&gt;#&lt;/a&gt; 时间和速度&lt;/h3&gt;
&lt;p&gt;磁盘驱动器它们的本质是机械旋转，因此，这仍然限制了它们的性能，磁盘访问的时间也并没有明显的降低。处理器和磁盘访问时间之间的差异在逐渐的增大。大体的趋势是处理器的速度正在以指数级增长，这使得处理器和外设之间的性能差异越来越大。&lt;/p&gt;
&lt;p&gt;上下文切换时间（Context-Switch Time）是从执行一个进程转换到执行另一个进程所花费的时间。&lt;/p&gt;
&lt;p&gt;时间片（Quantum）大体上就是一个进程必须让出处理器让其他进程运行之前分配给这个进程的 CPU 时间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;从某种意义上来说，使用键盘的用户就是一个外部设备。一名打字速度很快的打字员每 100 ms 可以按一次键。这个时间与进程调度的时间片数量级相同，而且这些数字与交互式分时系统具有可比性可能不是巧合。&lt;/strong&gt;（&lt;s&gt;博主注：有意思的观点，感觉计算机科学中似乎有很多类似的观点&lt;/s&gt;）&lt;/p&gt;
&lt;h3 id=&#34;多道程序设计和分时&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多道程序设计和分时&#34;&gt;#&lt;/a&gt; 多道程序设计和分时&lt;/h3&gt;
&lt;p&gt;多道程序设计（Multiprogramming）是指有多个进程准备执行，操作系统选择其中一个来执行。当该进程需要等待资源时（例如，一次按键或者磁盘访问），操作系统就会保存恢复该进程所需的所有信息。这其中的一个原因就是，执行磁盘 IO 的进程并没有很有效的利用 CPU，并且这种时间上的差距非常巨大。&lt;/p&gt;
&lt;p&gt;多道程序设计的实现基本上是，当一次资源请求（例如，read 或者 write）会引起一次操作系统请求（一次系统调用）。一次系统调用是对操作系统服务的一次请求，它会造成正常的 CPU 周期的中断并将控制权交回给操作系统，然后操作系统会切换到另一个进程。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;举个简单的例子&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;解释磁盘I/O请求是如何让操作系统运行另一个进程的&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;答案：大多数设备是由操作系统而不是应用程序处理的。当一个应用程序执行磁盘读取操作时，调用就会像操作系统发出请求来实际的执行这个操作。现在，操作系统拥有控制权。它可以向磁盘控制器发出命令，开始根据应用程序的请求检索磁盘快。然而，由于磁盘检索在相当长的一段时间内（用人类的时间尺度表示的相对尺度大概为162天）都无法完成，因此操作系统会将该应用程序进程放入一个等待I/O完成的进程队列，并启动另一个已经准备好运行的进程。最后，当磁盘I/O可用时，磁盘控制权就会中断CPU指令周期。这个时候操作系统将重新获得控制权，并选择是继续运行当前进程还是允许原来的进程运行&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="Unix" />
        <updated>2023-04-28T13:55:13.000Z</updated>
    </entry>
</feed>
